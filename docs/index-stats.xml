<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>YIGIT ASIK, Data Scientist</title>
<link>https://yigitasik.github.io/#category=Stats</link>
<atom:link href="https://yigitasik.github.io/index-stats.xml" rel="self" type="application/rss+xml"/>
<description>Anything related to statistics, analytics, and data science</description>
<generator>quarto-1.6.39</generator>
<lastBuildDate>Tue, 05 Aug 2025 21:00:00 GMT</lastBuildDate>
<item>
  <title>Partial Regression/Added Variable/Predictor Residual Plots</title>
  <dc:creator>Yiğit Aşık</dc:creator>
  <link>https://yigitasik.github.io/posts/Interpretablog - Partial Regression Plots/</link>
  <description><![CDATA[ 





<p>I wanted to introduce <em>partial regression plots</em> (or added variable plots, or predictor residual plots etc.), before moving any further down this <a href="https://yigitasik.github.io/#category=Interpretability">series</a>.</p>
<p>In the <a href="https://yigitasik.github.io/posts/Interpretablog%20-%20Fire%20and%20Forget/">first post of this series</a>, I showed a relationship by plotting <img src="https://latex.codecogs.com/png.latex?X_j"> vs <img src="https://latex.codecogs.com/png.latex?y">. In a multivariate setting, that doesn’t tell us much since if there seems to be a relationship, it might be due to shared effects with other variables that are not <img src="https://latex.codecogs.com/png.latex?X_j">. What will we do is to plot what exactly the regression coefficient tells us: Marginal effect of <img src="https://latex.codecogs.com/png.latex?X_j">, adjusted for other variables.</p>
<p>Idea is pretty nice:</p>
<ul>
<li>We have a variable <img src="https://latex.codecogs.com/png.latex?X_j">. We fit a model to predict it with other variables.</li>
<li>Residuals (<img src="https://latex.codecogs.com/png.latex?r_%7BXj%7D">) from that model represent the part of <img src="https://latex.codecogs.com/png.latex?X_j"> that cannot be explained by other variables.</li>
<li>Plot it against <img src="https://latex.codecogs.com/png.latex?y"> (or residuals of <img src="https://latex.codecogs.com/png.latex?y">).</li>
</ul>
<p>If you’re interested in the contribution of <img src="https://latex.codecogs.com/png.latex?X_j"> to prediction, after the contribution of all the other variables, you should plot against residuals of <img src="https://latex.codecogs.com/png.latex?y">.</p>
<p>Let’s exemplify this: We are here with our good old possum data, which I used in <a href="https://yigitasik.github.io/#category=Bayesian">different</a> examples as well.</p>
<div id="6dc948fa" class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1">df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_csv(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'possum.csv'</span>, usecols<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'head_l'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'tail_l'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'total_l'</span>])</span>
<span id="cb1-2">df.head()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="2">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">head_l</th>
<th data-quarto-table-cell-role="th">total_l</th>
<th data-quarto-table-cell-role="th">tail_l</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">0</td>
<td>94.1</td>
<td>89.0</td>
<td>36.0</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1</td>
<td>92.5</td>
<td>91.5</td>
<td>36.5</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">2</td>
<td>94.0</td>
<td>95.5</td>
<td>39.0</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">3</td>
<td>93.2</td>
<td>92.0</td>
<td>38.0</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">4</td>
<td>91.5</td>
<td>85.5</td>
<td>36.0</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
<div id="57d8976c" class="cell" data-execution_count="3">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1">X_full <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> sm.add_constant(df[[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'head_l'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'tail_l'</span>]])</span>
<span id="cb2-2">model_full <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> sm.OLS(df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'total_l'</span>], X_full).fit()</span>
<span id="cb2-3"></span>
<span id="cb2-4"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Coefficient for `head_l`: '</span>, np.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">round</span>(model_full.params[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'head_l'</span>], <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Coefficient for `head_l`:  0.695</code></pre>
</div>
</div>
<p>Here we have the full model with intercept, and note the coefficient of the head_l.</p>
<p>Now, I’m going to show both versions with raw values of <img src="https://latex.codecogs.com/png.latex?y"> and residuals of <img src="https://latex.codecogs.com/png.latex?y"> (<img src="https://latex.codecogs.com/png.latex?r_y">).</p>
<div id="c942c166" class="cell" data-execution_count="4">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Regressing head_l ~ tail_l</span></span>
<span id="cb4-2"></span>
<span id="cb4-3">model_head_resid <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> LinearRegression().fit(df[[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'tail_l'</span>]], df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'head_l'</span>])</span>
<span id="cb4-4">head_resids <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'head_l'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> model_head_resid.predict(df[[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'tail_l'</span>]]) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># residualized head_l</span></span></code></pre></div>
</div>
<div id="f73d249b" class="cell" data-execution_count="5">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1">X_v1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> sm.add_constant(head_resids) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># intercept</span></span>
<span id="cb5-2">model_v1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> sm.OLS(df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'total_l'</span>], X_v1).fit()</span>
<span id="cb5-3">pred_v1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model_v1.predict(X_v1)</span></code></pre></div>
</div>
<div id="0c4a3d3d" class="cell" data-execution_count="6">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1">plt.figure(figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>))</span>
<span id="cb6-2"></span>
<span id="cb6-3">plt.scatter(head_resids, df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'total_l'</span>], label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Data'</span>)</span>
<span id="cb6-4">plt.plot(head_resids, pred_v1, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'red'</span>, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Fitted Line'</span>)</span>
<span id="cb6-5"></span>
<span id="cb6-6">plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'V1: total_l ~ $r_</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{head_l}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">$'</span>)</span>
<span id="cb6-7"></span>
<span id="cb6-8">plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'residualized head_l'</span>)</span>
<span id="cb6-9">plt.ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'total_l'</span>)</span>
<span id="cb6-10"></span>
<span id="cb6-11">plt.legend()</span>
<span id="cb6-12">plt.grid(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://yigitasik.github.io/posts/Interpretablog - Partial Regression Plots/index_files/figure-html/cell-6-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<div id="baa22c38" class="cell" data-execution_count="7">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1">model_y_resid <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> LinearRegression().fit(df[[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'tail_l'</span>]], df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'total_l'</span>])</span>
<span id="cb7-2">y_resids <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'total_l'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> model_y_resid.predict(df[[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'tail_l'</span>]])</span></code></pre></div>
</div>
<div id="5495f35d" class="cell" data-execution_count="8">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1">X_v2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> sm.add_constant(head_resids) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># don't need it here actually, but wanted to keep things similar.</span></span>
<span id="cb8-2"></span>
<span id="cb8-3">model_v2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> sm.OLS(y_resids, X_v2).fit()</span>
<span id="cb8-4">pred_v2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model_v2.predict(X_v2)</span></code></pre></div>
</div>
<div id="c630484d" class="cell" data-execution_count="9">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1">plt.figure(figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>))</span>
<span id="cb9-2"></span>
<span id="cb9-3">plt.scatter(head_resids, y_resids, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Data'</span>)</span>
<span id="cb9-4">plt.plot(head_resids, pred_v2, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'orange'</span>, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Fitted Line'</span>)</span>
<span id="cb9-5"></span>
<span id="cb9-6">plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'V2: residualized y ~ residualized head_l'</span>)</span>
<span id="cb9-7"></span>
<span id="cb9-8">plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'residualized head_l'</span>)</span>
<span id="cb9-9">plt.ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'residualized total_l'</span>)</span>
<span id="cb9-10"></span>
<span id="cb9-11">plt.legend()</span>
<span id="cb9-12">plt.grid(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://yigitasik.github.io/posts/Interpretablog - Partial Regression Plots/index_files/figure-html/cell-9-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<div id="52a323a1" class="cell" data-execution_count="10">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Coefficient for `head_l`: '</span>, np.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">round</span>(model_full.params[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'head_l'</span>], <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>))</span>
<span id="cb10-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Version 1 (y ~ residualized X):'</span>, np.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">round</span>(model_v1.params[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>], <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>))</span>
<span id="cb10-3"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Version 2 (resid y ~ resid X):'</span>, np.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">round</span>(model_v2.params[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>], <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Coefficient for `head_l`:  0.695
Version 1 (y ~ residualized X): 0.695
Version 2 (resid y ~ resid X): 0.695</code></pre>
</div>
</div>
<p>Which one is better?</p>
<p>Well, the first version is easier to interpret since <code>y</code> is in its raw. However, spread of it contains the influence of other predictors as well. Hence, although the slope reflects the contribution after knowing the others, the vertical scatter is not corresponding to the full model.</p>
<p>In the second one, axes are purged from the influence of other variables. So, visually, we’re looking through the lens of “holding-others-constant” (literally).</p>
<p>This approach is beneficial for diagnostics as well, it seems to me, since:</p>
<ol type="1">
<li>It’s easier to see if a particular point is pulling the slope strongly.</li>
<li>If there’s high multicollinearity, <img src="https://latex.codecogs.com/png.latex?r_%7BX_j%7D"> would show a very low variance since most of it gets explained by other variables.</li>
<li>The pattern is apparent, and if it shows different kind you may think about transformations.</li>
<li>It’s much easier to communicate compared to giving out the coefficient only.</li>
</ol>



 ]]></description>
  <category>Stats</category>
  <category>Interpretability</category>
  <guid>https://yigitasik.github.io/posts/Interpretablog - Partial Regression Plots/</guid>
  <pubDate>Tue, 05 Aug 2025 21:00:00 GMT</pubDate>
</item>
<item>
  <title>Interpretablog - Fire &amp; Forget</title>
  <dc:creator>Yiğit Aşık</dc:creator>
  <link>https://yigitasik.github.io/posts/Interpretablog - Fire and Forget/</link>
  <description><![CDATA[ 





<p>Welcome to a new series on interpretability where I’ll go through methods to interpret models, starting from the linear regression to so called black-box ensembles. I wanted to start this series for a while, due to two reasons:</p>
<ol type="1">
<li>I feel like anything I write is helpful for me, like I’m explaining to my future self. So, anytime I can’t recall something my own blog becomes my go-to source.</li>
<li>There seems to be a lot of confusions within the ML field in terms of interpretability (at least among the new comers), where most of the time wording suggest causality when it shouldn’t. I think I learned a few approaches to be helpful for that as well.</li>
</ol>
<p>If you want a book to find everything in one place your go-to source should be <a href="https://christophm.github.io/interpretable-ml-book/"><em>Interpretable ML</em></a> by Christoph Molnar. Most of the approaches that I learned is from there. I should also give credit to <a href="https://avehtari.github.io/ROS-Examples/"><em>Regression and Other Stories</em></a>.</p>
<p>By the way, throughout the series I won’t dive much into how to fit models. So, I assume some familiarity with GLMs, decision tree, and bagging and boosting methods in general. For example, I won’t walk through the summary table below, assuming you already know how to read it.</p>
<p>Let’s start with a <em>simple linear regression</em> where we only have predictor show a simple trick that aids the interpretability.</p>
<div id="cell-3" class="cell" data-execution_count="3">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1">model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> smf.ols(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'kid_score ~ mom_iq'</span>, data<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>cognitive)</span>
<span id="cb1-2">results <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model.fit()</span>
<span id="cb1-3"></span>
<span id="cb1-4"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(results.summary())</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>                            OLS Regression Results                            
==============================================================================
Dep. Variable:              kid_score   R-squared:                       0.201
Model:                            OLS   Adj. R-squared:                  0.199
Method:                 Least Squares   F-statistic:                     108.6
Date:                Wed, 16 Jul 2025   Prob (F-statistic):           7.66e-23
Time:                        15:08:03   Log-Likelihood:                -1875.6
No. Observations:                 434   AIC:                             3755.
Df Residuals:                     432   BIC:                             3763.
Df Model:                           1                                         
Covariance Type:            nonrobust                                         
==============================================================================
                 coef    std err          t      P&gt;|t|      [0.025      0.975]
------------------------------------------------------------------------------
Intercept     25.7998      5.917      4.360      0.000      14.169      37.430
mom_iq         0.6100      0.059     10.423      0.000       0.495       0.725
==============================================================================
Omnibus:                        7.545   Durbin-Watson:                   1.645
Prob(Omnibus):                  0.023   Jarque-Bera (JB):                7.735
Skew:                          -0.324   Prob(JB):                       0.0209
Kurtosis:                       2.919   Cond. No.                         682.
==============================================================================

Notes:
[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.</code></pre>
</div>
</div>
<p>What the table above tells us is that: <img src="https://latex.codecogs.com/png.latex?%5Cdisplaystyle%20%5Ctext%7BE%5Bkid's%20score%20%7C%20mom's%20iq%5D%7D%20=%2025.7998%20+%200.61%20%5Ccdot%20%5Ctext%7Bmom's%20iq%7D"></p>
<p>Which implies the intercept, 25.7998, is the expected value of kid’s score when the mom’s iq is 0. That doesn’t make sense, right? Nobody has an IQ score of 0.</p>
<p>So, a way to make it make sense is via centering the predictor so that the intercept corresponds to the mean. Let me show.</p>
<div id="cell-6" class="cell" data-execution_count="4">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1">offset <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.mean(cognitive[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'mom_iq'</span>])</span>
<span id="cb3-2">cognitive[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'mom_iq_c'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> cognitive[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'mom_iq'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> offset</span>
<span id="cb3-3"></span>
<span id="cb3-4">model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> smf.ols(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'kid_score ~ mom_iq_c'</span>, data<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>cognitive)</span>
<span id="cb3-5">results <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model.fit()</span>
<span id="cb3-6"></span>
<span id="cb3-7"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(results.summary())</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>                            OLS Regression Results                            
==============================================================================
Dep. Variable:              kid_score   R-squared:                       0.201
Model:                            OLS   Adj. R-squared:                  0.199
Method:                 Least Squares   F-statistic:                     108.6
Date:                Wed, 16 Jul 2025   Prob (F-statistic):           7.66e-23
Time:                        15:08:03   Log-Likelihood:                -1875.6
No. Observations:                 434   AIC:                             3755.
Df Residuals:                     432   BIC:                             3763.
Df Model:                           1                                         
Covariance Type:            nonrobust                                         
==============================================================================
                 coef    std err          t      P&gt;|t|      [0.025      0.975]
------------------------------------------------------------------------------
Intercept     86.7972      0.877     98.993      0.000      85.074      88.521
mom_iq_c       0.6100      0.059     10.423      0.000       0.495       0.725
==============================================================================
Omnibus:                        7.545   Durbin-Watson:                   1.645
Prob(Omnibus):                  0.023   Jarque-Bera (JB):                7.735
Skew:                          -0.324   Prob(JB):                       0.0209
Kurtosis:                       2.919   Cond. No.                         15.0
==============================================================================

Notes:
[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.</code></pre>
</div>
</div>
<p>As you can see, intercept has changed since now it corresponds to the expected value of kid’s score when the <em>mom_iq</em> is the average.</p>
<div id="cell-8" class="cell" data-execution_count="5">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(np.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">round</span>(cognitive[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'kid_score'</span>].mean(), <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>86.7972</code></pre>
</div>
</div>
<p>What about the slope? Isn’t it interpreted as <em>one unit increase in mom’s IQ is associated with 0.61 increase of kid’s score</em>?</p>
<p>I suggest you to stay away from such interpretation. The model does <em>not</em> provide information about changes <em>within</em> units but about <em>comparisons between units</em>. So, the most secure way of interpretation is as follows: <em>Under the model, a kid with a mom’s score of x+1 will be, on average, 0.61 IQ higher compared to a kid with a mom’s score of x.</em></p>
<p>Let’s extend this to a more general setting where there’s more than 1 variable.</p>
<div id="cell-10" class="cell" data-execution_count="6">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1">model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> smf.ols(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'kid_score ~ mom_iq + mom_hs'</span>, data<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>cognitive)</span>
<span id="cb7-2">results <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model.fit()</span>
<span id="cb7-3"></span>
<span id="cb7-4"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(results.summary())</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>                            OLS Regression Results                            
==============================================================================
Dep. Variable:              kid_score   R-squared:                       0.214
Model:                            OLS   Adj. R-squared:                  0.210
Method:                 Least Squares   F-statistic:                     58.72
Date:                Wed, 16 Jul 2025   Prob (F-statistic):           2.79e-23
Time:                        15:08:03   Log-Likelihood:                -1872.0
No. Observations:                 434   AIC:                             3750.
Df Residuals:                     431   BIC:                             3762.
Df Model:                           2                                         
Covariance Type:            nonrobust                                         
=================================================================================
                    coef    std err          t      P&gt;|t|      [0.025      0.975]
---------------------------------------------------------------------------------
Intercept        25.7315      5.875      4.380      0.000      14.184      37.279
mom_hs[T.yes]     5.9501      2.212      2.690      0.007       1.603      10.297
mom_iq            0.5639      0.061      9.309      0.000       0.445       0.683
==============================================================================
Omnibus:                        7.327   Durbin-Watson:                   1.625
Prob(Omnibus):                  0.026   Jarque-Bera (JB):                7.530
Skew:                          -0.313   Prob(JB):                       0.0232
Kurtosis:                       2.845   Cond. No.                         683.
==============================================================================

Notes:
[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.</code></pre>
</div>
</div>
<p>In this setting, the coefficient corresponds to the <em>expected difference between two observations, or group of observations, that only differ on the interested predictor by 1.</em> Very simple way of showing it is like below:</p>
<p><img src="https://latex.codecogs.com/png.latex?%5Cdisplaystyle%20%5Cbeta_0%20+%20%5Cbeta_1X_1%20+%20%5Cbeta_2X_2"></p>
<p><img src="https://latex.codecogs.com/png.latex?%5Cdisplaystyle%20%5Cbeta_0%20+%20%5Cbeta_1(X_1+1)%20+%20%5Cbeta_2X_2%20=%20%5Cbeta_0%20+%20%5Cbeta_1X_1%20+%20%5Cbeta_1%20+%20%5Cbeta_2X_2"></p>
<p>if I take the difference: <img src="https://latex.codecogs.com/png.latex?%5Cdisplaystyle%20(%5Cbeta_0%20+%20%5Cbeta_1X_1%20+%20%5Cbeta_1%20+%20%5Cbeta_2X_2)%20-%20(%5Cbeta_0%20+%20%5Cbeta_1X_1%20+%20%5Cbeta_2X_2)%20=%20%5Cbeta_1"></p>
<p>This also points out the problem with collinearity. If <img src="https://latex.codecogs.com/png.latex?X_1"> and <img src="https://latex.codecogs.com/png.latex?X_2"> changes together, how am I gonna be left with <img src="https://latex.codecogs.com/png.latex?%5Cbeta_1"> alone since others won’t cancel each other. Hence, we won’t be able to attribute the change to a single variable.</p>
<p>With these interpretations from the table in mind, we can also make use of plots which are more intuitive.</p>
<div id="cell-13" class="cell" data-execution_count="7">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1">mean_kid_by_mom <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> cognitive.groupby(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'mom_iq'</span>)[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'kid_score'</span>].mean()</span></code></pre></div>
</div>
<div id="cell-14" class="cell" data-execution_count="8">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1">low_end, high_end <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> cognitive[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'mom_iq'</span>].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">min</span>(), cognitive[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'mom_iq'</span>].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">max</span>()</span>
<span id="cb10-2">qs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.linspace(low_end, high_end, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">101</span>)</span></code></pre></div>
</div>
<div id="cell-15" class="cell" data-execution_count="9">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1">newdata_yes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.DataFrame()</span>
<span id="cb11-2"></span>
<span id="cb11-3">newdata_yes[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'mom_iq'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> qs</span>
<span id="cb11-4">newdata_yes[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'mom_hs'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'yes'</span></span>
<span id="cb11-5">newdata_yes[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'preds'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> results.predict(newdata_yes)</span></code></pre></div>
</div>
<div id="cell-16" class="cell" data-execution_count="10">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1">newdata_no <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.DataFrame()</span>
<span id="cb12-2"></span>
<span id="cb12-3">newdata_no[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'mom_iq'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> qs</span>
<span id="cb12-4">newdata_no[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'mom_hs'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'no'</span></span>
<span id="cb12-5">newdata_no[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'preds'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> results.predict(newdata_no)</span></code></pre></div>
</div>
<div id="cell-17" class="cell" data-execution_count="11">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1">plt.figure(figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>))</span>
<span id="cb13-2"></span>
<span id="cb13-3">plt.plot(mean_kid_by_mom, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'o'</span>, alpha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.43</span>)</span>
<span id="cb13-4">plt.plot(newdata_yes[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'mom_iq'</span>], newdata_yes[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'preds'</span>], label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'HS_Yes'</span>, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'C1'</span>, lw<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb13-5">plt.plot(newdata_no[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'mom_iq'</span>], newdata_no[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'preds'</span>], label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'HS_No'</span>, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'C3'</span>, lw<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb13-6"></span>
<span id="cb13-7">plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'mom</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\'</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">s iq'</span>)</span>
<span id="cb13-8">plt.ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'kid score'</span>)</span>
<span id="cb13-9">plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Kid_score ~ mom_iq + mom_hs'</span>)</span>
<span id="cb13-10"></span>
<span id="cb13-11">plt.legend()</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://yigitasik.github.io/posts/Interpretablog - Fire and Forget/index_files/figure-html/cell-10-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>With plots, it’s very easy to understand the model and its assumptions. By looking at the plot, for example, it’s apparent that coefficient of <em>mom’s iq</em> does not depend on high school variable — the slope is the same for both levels of high school.</p>
<p>We can include an interaction term in the model specification, so that it can depend on the level of high school.</p>
<div id="cell-19" class="cell" data-execution_count="12">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1">model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> smf.ols(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'kid_score ~ mom_iq + mom_hs + mom_iq:mom_hs'</span>, data<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>cognitive)</span>
<span id="cb14-2">results <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model.fit()</span>
<span id="cb14-3"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(results.summary())</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>                            OLS Regression Results                            
==============================================================================
Dep. Variable:              kid_score   R-squared:                       0.230
Model:                            OLS   Adj. R-squared:                  0.225
Method:                 Least Squares   F-statistic:                     42.84
Date:                Wed, 16 Jul 2025   Prob (F-statistic):           3.07e-24
Time:                        15:08:04   Log-Likelihood:                -1867.5
No. Observations:                 434   AIC:                             3743.
Df Residuals:                     430   BIC:                             3759.
Df Model:                           3                                         
Covariance Type:            nonrobust                                         
========================================================================================
                           coef    std err          t      P&gt;|t|      [0.025      0.975]
----------------------------------------------------------------------------------------
Intercept              -11.4820     13.758     -0.835      0.404     -38.523      15.559
mom_hs[T.yes]           51.2682     15.338      3.343      0.001      21.122      81.414
mom_iq                   0.9689      0.148      6.531      0.000       0.677       1.260
mom_iq:mom_hs[T.yes]    -0.4843      0.162     -2.985      0.003      -0.803      -0.165
==============================================================================
Omnibus:                        8.014   Durbin-Watson:                   1.660
Prob(Omnibus):                  0.018   Jarque-Bera (JB):                8.258
Skew:                          -0.333   Prob(JB):                       0.0161
Kurtosis:                       2.887   Cond. No.                     3.10e+03
==============================================================================

Notes:
[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.
[2] The condition number is large, 3.1e+03. This might indicate that there are
strong multicollinearity or other numerical problems.</code></pre>
</div>
</div>
<p>Just like that, we allowed the coefficient of mom_iq to change depending on the level of mom_hs. But how do we interpret them now?</p>
<p>The most intuitive way is via the plot:</p>
<div id="cell-21" class="cell" data-execution_count="13">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb16-1">newdata_hs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.DataFrame()</span>
<span id="cb16-2"></span>
<span id="cb16-3">newdata_hs[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'mom_iq'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.linspace(np.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">min</span>(cognitive[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'mom_iq'</span>]), np.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">max</span>(cognitive[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'mom_iq'</span>]), <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">101</span>)</span>
<span id="cb16-4">newdata_hs[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'mom_hs'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'yes'</span></span>
<span id="cb16-5"></span>
<span id="cb16-6">pred_hs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> results.predict(newdata_hs)</span></code></pre></div>
</div>
<div id="cell-22" class="cell" data-execution_count="14">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb17-1">newdata_nohs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.DataFrame()</span>
<span id="cb17-2"></span>
<span id="cb17-3">newdata_nohs[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'mom_iq'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.linspace(np.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">min</span>(cognitive[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'mom_iq'</span>]), np.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">max</span>(cognitive[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'mom_iq'</span>]), <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">101</span>)</span>
<span id="cb17-4">newdata_nohs[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'mom_hs'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'no'</span></span>
<span id="cb17-5"></span>
<span id="cb17-6">pred_nohs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> results.predict(newdata_nohs)</span></code></pre></div>
</div>
<div id="cell-23" class="cell" data-execution_count="15">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb18-1">plt.figure(figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>))</span>
<span id="cb18-2"></span>
<span id="cb18-3">plt.plot(cognitive[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'mom_iq'</span>], cognitive[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'kid_score'</span>], <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'o'</span>, alpha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.43</span>)</span>
<span id="cb18-4">plt.plot(newdata_hs[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'mom_iq'</span>], pred_hs, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'HS_yes'</span>, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'C1'</span>, ls<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'-'</span>, lw<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb18-5">plt.plot(newdata_nohs[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'mom_iq'</span>], pred_nohs, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'HS_no'</span>, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'C3'</span>, ls<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'-'</span>, lw<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb18-6"></span>
<span id="cb18-7">plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Mom</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\'</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">s iq'</span>)</span>
<span id="cb18-8">plt.ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Kid</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\'</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">s score'</span>)</span>
<span id="cb18-9">plt.legend()</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://yigitasik.github.io/posts/Interpretablog - Fire and Forget/index_files/figure-html/cell-14-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>Seaborn makes quick plotting available.</p>
<div id="cell-25" class="cell" data-execution_count="16">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb19-1">sns.lmplot(</span>
<span id="cb19-2">    data<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>cognitive, x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'mom_iq'</span>, y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'kid_score'</span>, hue<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'mom_hs'</span>, </span>
<span id="cb19-3">    ci<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>, scatter_kws<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>{<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'alpha'</span>:<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.4</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'s'</span>:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>},</span>
<span id="cb19-4">    height<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, aspect<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.23</span></span>
<span id="cb19-5">)</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://yigitasik.github.io/posts/Interpretablog - Fire and Forget/index_files/figure-html/cell-15-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>Plots show that the lines are not parallel, so coefficients are not the same for both levels of high school variable.</p>
<p>I want to emphasize this, interaction effect is ADDITIVE to the main effect. Since interpretation of “while holding all other variables constant” is meaningless - we can’t hold mom_iq constant while increasing the interaction variable.</p>
<p>What it means to be additive? Well, think of it this way. The coefficient of interaction is negative. When the high school level is yes, we add -0.4843 to the slope of the <em>mom_iq</em>. Since the coefficient of <em>mom_iq</em> positive, it means that mom_iq matters less when the level of high school is “yes”.</p>
<p>I hope this post clarified some aspects of interpretation of linear models. Of course, there are extensions of the classic linear regression, called Generalized Linear Models (GLMs). Actually, linear regression itself is a special case in GLM framework where the link function is identity function.</p>
<p>Anyway, I believe I’ll follow this up with model agnostic methods since most of you go for ML models. However, make no mistake, you may actually need these parametric approaches since you don’t always end up with a lot of data.</p>
<p>Until then, take care!</p>



 ]]></description>
  <category>Stats</category>
  <category>Interpretability</category>
  <guid>https://yigitasik.github.io/posts/Interpretablog - Fire and Forget/</guid>
  <pubDate>Tue, 15 Jul 2025 21:00:00 GMT</pubDate>
</item>
<item>
  <title>Intuitive Conceptual Framing For Summary Statistics</title>
  <dc:creator>Yiğit Aşık</dc:creator>
  <link>https://yigitasik.github.io/posts/Intuitive Approach to Mean and Variance/</link>
  <description><![CDATA[ 





<p>In statistics and data science, there is a pattern of trying to <a href="https://yigitasik.github.io/posts/Basketball%20Analytics%20and%20Daily%20Job/">boil down things into a single number</a>. <em>Mean</em> and <em>variance</em> fit well to that pattern. Let’s take a look at them, but with not-so-common conceptual framing that I learned from Kruschke’s <a href="https://nyu-cdsc.github.io/learningr/assets/kruschke_bayesian_in_R.pdf"><em>Doing Bayesian Data Analysis</em></a>.</p>
<section id="center-and-variability-basics" class="level3">
<h3 class="anchored" data-anchor-id="center-and-variability-basics">Center and Variability: Basics</h3>
<p>Idea with the mean is to represent the center of a <em>probability distribution</em> (series of values and their corresponding probabilities). It’s defined as: <img src="https://latex.codecogs.com/png.latex?%5Cdisplaystyle%20E%5Bx%5D%20=%20%5Csum%7Bp(x)x%7D">. Don’t get confused by <img src="https://latex.codecogs.com/png.latex?E%5Bx%5D">, which is called <em>expected value</em> (i.e., mean). Well, this equation is only applicable when the values (<em>x</em>s) are discrete, hence <img src="https://latex.codecogs.com/png.latex?p(x)"> corresponds to probability mass. When <em>x</em>s are continuous, you have the following:</p>
<p><img src="https://latex.codecogs.com/png.latex?%5Cdisplaystyle%20E%5Bx%5D%20=%20%5Cint%20p(x)x%20%5C,%20dx"> where <img src="https://latex.codecogs.com/png.latex?p(x)"> corresponds to probability densities.</p>
<p>On the other hand, variability of a distribution is also something that we are interested in. There comes the <em>variance</em>, telling us (roughly) how much a typical value stands away from the distribution’s mean. I said <em>roughly</em>, because what I have said is actually the <em>deviance</em>. The variance is the <em>mean squared deviance</em>: <img src="https://latex.codecogs.com/png.latex?%5Cdisplaystyle%20%5Csigma%5E2%20=%20%5Cfrac%7B1%7D%7Bn%7D%20%5Csum_%7Bi=1%7D%5E%7Bn%7D%20(x%20-%20E%5Bx%5D)%5E2">,</p>
<p>and for continuous values of <em>x</em>: <img src="https://latex.codecogs.com/png.latex?%5Cdisplaystyle%20%5Csigma%5E2%20=%20%5Cint%20p(x)%20(x%20-%20E%5Bx%5D)%5E2%20%5C,%20dx"></p>
</section>
<section id="conceptual-framing-from-variance-to-mean" class="level3">
<h3 class="anchored" data-anchor-id="conceptual-framing-from-variance-to-mean">Conceptual Framing: From variance to mean</h3>
<p>Every book in statistics (at least the ones that I know of) starts with mean and gets to the variance. This conceptual framing is reversed, in the sense that it makes one end with the center of a distribution.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://yigitasik.github.io/posts/Intuitive Approach to Mean and Variance/stacked_dot.png" class="img-fluid figure-img"></p>
<figcaption>Stacked dot plot of interest rates of some previous data, with the mean as a red triangle</figcaption>
</figure>
</div>
<p>Think of a distribution: If you thought of a discrete one, let’s represent it in your head with a <em>stacked dot plot</em>. If it’s continuous, then think of a <em>density plot</em>. In either way, we would like to represent center of the distribution with a value that is around the most stacked (for the former) or most dense values (for the latter). So, we are looking for a value M that <em>minimizes the expected distance between it and rest of the values of the distribution, in the long run</em> (as a rule of thumb, always think in long runs when it’s a frequentist method). Most common way of defining the distance is squared difference which gets larger if two quantity is far away from each other: <img src="https://latex.codecogs.com/png.latex?(x%20-%20M)%5E2">. So, we need a value M that minimizes the following: <img src="https://latex.codecogs.com/png.latex?%5Cdisplaystyle%20%5Cint%20p(x)(x-M)%5E2%20%5C,%20dx"></p>
<p>Guess which value minimizes the equation above? You probably guessed it right, since it’s also available from the preceding section: <img src="https://latex.codecogs.com/png.latex?E%5Bx%5D">. Here’s where things get very interesting for me. If you decide to go with <img src="https://latex.codecogs.com/png.latex?%7Cx%20-%20M%7C"> as the measure for distance, then it is the <em>median</em> that minimizes the expected distance in the long run. If you plug zeros for exact matches and ones for mismatches as a distance, you get the <em>mode</em>.</p>
<hr>
<p>The beauty in mathematics or statistics is connection, at least to me. Even while writing this, I like how distances invoke vector norms, and minimization brings up calculus etc. This example connects mean, median, mode in my head, hence making it more intuitive. The book itself is great btw, if you’re interested in Bayesian methods I highly suggest it. Until next time, take care!</p>


</section>

 ]]></description>
  <category>Stats</category>
  <guid>https://yigitasik.github.io/posts/Intuitive Approach to Mean and Variance/</guid>
  <pubDate>Fri, 21 Feb 2025 21:00:00 GMT</pubDate>
</item>
<item>
  <title>What’s an Interaction Effect? An example</title>
  <dc:creator>Yiğit Aşık</dc:creator>
  <link>https://yigitasik.github.io/posts/what is an interaction effect/</link>
  <description><![CDATA[ 





<p>Some time ago, I had the chance to get my hands on some NBA data from 2013–14 and 2014–15 season. Back in the day SportsVu was the provider for the NBA data (it changed in 2017) and variables such as <code>number of dribbles</code>, <code>touch time</code>, <code>closest defender</code>, <code>closest defender distance</code> were available (these are not publicly accessible anymore). I wanted to leverage that data and attempt to create a new metric that captures players’ ability to shoot the ball better: Idea was to penalize misses that were likely to go in and reward makes that are less likely to go in while weighing 3 pointers as usual. I actually created something along these lines and called it shot proficiency which also takes shot volume into account. I may post about it later.</p>
<p>I decided to go with two separate models (we are looking at the one made for 2 pointers). I had an idea of how it would look like in certain metrics since I have taken a look at the literature before and was satisfied with the results. I wanted to know if what the model thinks is in line with my intuition of what makes shots more likely to go in so I started with <a href="https://www.datacamp.com/tutorial/introduction-to-shap-values-machine-learning-interpretability">SHAP summary plot</a>.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://yigitasik.github.io/posts/what is an interaction effect/shap_summary_plot1.webp" class="img-fluid figure-img"></p>
<figcaption>SHAP Summary Plot</figcaption>
</figure>
</div>
<p>If you haven’t seen this plot before, basically it tells how each variables’ values (indicated by the color, check the colorbar) effect the outcome (corresponding horizontal axis) for each observation (observations correspond to data points). For example, looking at the shot distance, the model lowered the prediction as the shot distance gets larger. Overall, it seems intuitive: Shots that are closer to the basket have higher prediction, as the defender distance decreases so does the prediction for that shot to go in etc. However, there are wide range of predictions for similar values of shot distance (specifically for shots that are close to the basket) and closest defender distance. In other words, the effect is not the same across the data. <strong>When an effect of a value on a prediction is not constant, next step is to investigate interactions:</strong> Does the effect get <em>moderated</em> by other variables? In other words, <em>does the effect of one variable depends on the value of another variable?</em></p>
<p>SHAP offers methods to visualize both the main and interaction effects, an example can be found <a href="https://shap.readthedocs.io/en/latest/example_notebooks/tabular_examples/tree_based_models/NHANES%20I%20Survival%20Model.html#SHAP-Interaction-Value-Summary-Plot">here</a>. For this example, I had domain knowledge (I played organizational basketball for 10+ years) so I progressed with dependence plot.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://yigitasik.github.io/posts/what is an interaction effect/shap_interaction_plot1.webp" class="img-fluid figure-img"></p>
<figcaption>Plot to observe interaction between height difference and closest defender distance</figcaption>
</figure>
</div>
<p>Horizontal axis of the dependence plot represents the real values of <code>diff_in_height</code> while vertical axis corresponds to how it effects the prediction. So, without the color it gives you the main effect of the variable which is pretty intuitive: Higher height differences in favor of the defender lowers the probability of shots to go in.</p>
<p>However, there is something counterintuitive: Towards the very right side, you can see the predictions being lower for the shots when the defender is far away (and higher when the defender is close). That’s pretty counter-intuitive, I wouldn’t want a defender bothering me while shooting despite having height advantage. At this moment, domain knowledge kicks in.</p>
<p><img src="https://yigitasik.github.io/posts/what is an interaction effect/shap_interaction_plot2.webp" class="img-fluid"></p>
<ol type="1">
<li>I suspected that to be moderated by a third variable, shot distance. Difference in height creates more advantage when the shooter is close to the basket and less so as one gets closer to the 3-pt line. This means the effect of height difference increases as the shot distance decreases.</li>
<li>Another thing: There are a lot of shots where the difference in height is in favor of the defender (so, looking at the other end of the plot) and the closest defender distance is high. This might be due to defenders swapping who they defend after a play called pick &amp; roll. I do not have play-by-play data that labels those so we are not going to be able to check them directly but indirectly: Switch on a pick &amp; roll usually results in quick ball handler against a slow big guy relatively away from the basket, which forces big guy to take back a step or two to be able to stand in front of the ball handler. This gap creates relatively comfortable space for the ball handler to shoot, hence I suspect those shots to come from distance.</li>
</ol>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://yigitasik.github.io/posts/what is an interaction effect/R_plot.webp" class="img-fluid figure-img"></p>
<figcaption>Investigating many interactions via scatter plot with color and size parameters</figcaption>
</figure>
</div>
<p>The plot aligns with both hypotheses:</p>
<ul>
<li>The model predicts a higher shot probability when height difference favors the shooter <em>and</em> the closest defender is nearby — these are shots close to the basket, confirming the first assumption.</li>
<li>For shots where the defender is far away despite having a height advantage, the model predicts lower probabilities. While I can’t directly verify if these shots follow a pick &amp; roll, the assumption led to the hypothesis that these shots come from longer distances — which is confirmed in the plot.</li>
</ul>
<hr>
<p>I like explainable AI methods to understand how the model makes predictions along with some validation: Does the model act in a way that I expect it to? Interactions are huge part of this process, many effects in the real world are not uniform across groups, so it’s something I am always interested in. If you’re like me, a good starting point might be <a href="https://lakens.github.io/statistical_inferences/06-effectsize.html#effect-sizes-for-interactions">this chapter</a> from Lakens’ book.</p>
<p>Anyway, I hope you enjoyed the read. Have a nice Sunday!</p>



 ]]></description>
  <category>Stats</category>
  <category>Inference</category>
  <guid>https://yigitasik.github.io/posts/what is an interaction effect/</guid>
  <pubDate>Sat, 08 Feb 2025 21:00:00 GMT</pubDate>
</item>
<item>
  <title>Bayesian Way - Predictions Out of Posterior Distribution</title>
  <dc:creator>Yiğit Aşık</dc:creator>
  <link>https://yigitasik.github.io/posts/Bayesian Way - Predictions out of Posterior Distribution/</link>
  <description><![CDATA[ 





<p>In the <a href="https://yigitasik.github.io/posts/Model%20Fitting%20with%20Likelihood/">previous post</a>, the model was fit using a grid approximation for likelihood calculation under each hypothesis (i.e., for each pair of parameters). Now, let’s take a step further and calculate <em>posterior distribution</em> and take the <em>marginal distribution</em> for each parameter (i.e, the intercept and the slope). If things seem complicated, I advice you to take a look at the <a href="https://yigitasik.github.io/posts/Model%20Fitting%20with%20Likelihood/">previous post</a>.</p>
<p>Although I posted about Bayesian approach <a href="https://yigitasik.github.io/#category=Bayesian">before</a>, it might be nice to summarize it a bit:</p>
<p>In my opinion, best summation of Bayesian way of thinking is made in a single sentence by John Kruschke in his book <em>Doing Bayesian Data Analysis</em>:</p>
<pre><code>"Bayesian inference is reallocation of credibility across possibilities."</code></pre>
<p>The word “reallocation” implies <ins>prior allocation</ins> of credibility across possibilities. Let me exemplify the whole thing:</p>
<p>I work in a hybrid office where we’re required to be present three days a week. We get to choose which days, but most of the team tends to come in on Wednesdays.</p>
<p>Last Wednesday, I headed to the office assuming that my team leader, Isil, would be there as well. At first, my belief strongly leaned toward her showing up due to my prior knowledge. When I arrived on our floor five minutes early and saw her laptop, my belief was strengthened.</p>
<p>However, as time passed and every other team member arrived—except Isil—my confidence started to fade. By 10 o’clock, I was almost certain she wasn’t coming in. Later, I found out she had to take the day off.</p>
<p>This is a nice real-life demonstration of Bayesian view: At the very start, I had a subjective degree of belief about Isil showing up. As I collected more data (e.g., spotting her laptop, others arriving etc.), I updated that belief and it gradually shifted towards the opposite direction.</p>
<p>On the example above, I had an <em>informative prior</em>: It wasn’t 50-50 (equally likely) in terms of her showing up or not. On the other hand, <a href="https://yigitasik.github.io/posts/Bayes%20Theorem/">this example</a> started with an <em>uninformative prior</em> where each hypothesis is equally likely.</p>
<p>Now, for this one, I’ll do a very similar thing: I’ll have a prior distribution for each parameter that represents my prior belief about its possible values (i.e., “possibilities above”). Then, I’ll repeat the steps that I did in the <a href="https://yigitasik.github.io/posts/Model%20Fitting%20with%20Likelihood/">previous post</a> and update my belief accordingly.</p>
<div id="cell-4" class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb2-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span>
<span id="cb2-3"></span>
<span id="cb2-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> matplotlib <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb2-5"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> seaborn <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> sns</span>
<span id="cb2-6"></span>
<span id="cb2-7"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> statsmodels <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> sm</span>
<span id="cb2-8"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> empiricaldist <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> emd</span>
<span id="cb2-9"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> scipy.stats <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> st</span>
<span id="cb2-10"></span>
<span id="cb2-11"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> utils <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> ut</span>
<span id="cb2-12"></span>
<span id="cb2-13"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> warnings</span>
<span id="cb2-14"></span>
<span id="cb2-15">warnings.filterwarnings(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ignore'</span>)</span></code></pre></div>
</div>
<div id="cell-5" class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1">possum <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_csv(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'possum.csv'</span>, usecols<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'pop'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'tail_l'</span>])</span>
<span id="cb3-2">df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> possum.copy()</span>
<span id="cb3-3"></span>
<span id="cb3-4">df.head(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="2">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">pop</th>
<th data-quarto-table-cell-role="th">tail_l</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">0</td>
<td>Vic</td>
<td>36.0</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1</td>
<td>Vic</td>
<td>36.5</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">2</td>
<td>Vic</td>
<td>39.0</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
<p>I have the same <a href="https://www.openintro.org/data/index.php?data=possum">data</a> as before where each row corresponds to features of a possum from Australia and New Guinea. Same as before, let’s attempt to predict which region a possum is from via its tail length.</p>
<div id="cell-7" class="cell" data-execution_count="3">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1">qs_cept <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.linspace(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.2</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.8</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">281</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># possible values for intercept (beta_0)</span></span>
<span id="cb4-2">qs_slope <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.linspace(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.4</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">221</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># possible values for slope (beta_1)</span></span></code></pre></div>
</div>
<p>I’ll create a uniform distribution for both set of possible values (i.e., <em>sample spaces</em>), where each value is equally likely.</p>
<div id="cell-9" class="cell" data-execution_count="4">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1">uniform_cept <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.Series(data<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(qs_cept) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> qs <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> qs_cept], index<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>qs_cept)</span>
<span id="cb5-2">uniform_cept.head(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="4">
<pre><code>-1.200000    0.003559
-1.192857    0.003559
-1.185714    0.003559
dtype: float64</code></pre>
</div>
</div>
<div id="cell-10" class="cell" data-execution_count="5">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1">uniform_slope <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.Series(data<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(qs_slope) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> qs <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> qs_slope], index<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>qs_slope)</span>
<span id="cb7-2">uniform_slope.head(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="5">
<pre><code>-1.400000    0.004525
-1.393636    0.004525
-1.387273    0.004525
dtype: float64</code></pre>
</div>
</div>
<p>Taking their outer product gives us the joint distribution.</p>
<p>Heads up: If your priors are normalized (i.e., sum up to 1), so does your joint as well.</p>
<div id="cell-12" class="cell" data-execution_count="6">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">## Joint dist</span></span>
<span id="cb9-2"></span>
<span id="cb9-3">A, B <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.meshgrid(uniform_slope, uniform_cept)</span>
<span id="cb9-4"></span>
<span id="cb9-5">df_prior <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.DataFrame(A<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>B, columns<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>uniform_slope.index, index<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>uniform_cept.index)</span>
<span id="cb9-6">df_prior.iloc[:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, :<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>]</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="6">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">-1.400000</th>
<th data-quarto-table-cell-role="th">-1.393636</th>
<th data-quarto-table-cell-role="th">-1.387273</th>
<th data-quarto-table-cell-role="th">-1.380909</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">-1.200000</td>
<td>0.000016</td>
<td>0.000016</td>
<td>0.000016</td>
<td>0.000016</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">-1.192857</td>
<td>0.000016</td>
<td>0.000016</td>
<td>0.000016</td>
<td>0.000016</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">-1.185714</td>
<td>0.000016</td>
<td>0.000016</td>
<td>0.000016</td>
<td>0.000016</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">-1.178571</td>
<td>0.000016</td>
<td>0.000016</td>
<td>0.000016</td>
<td>0.000016</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
<div id="cell-13" class="cell" data-execution_count="7">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1">df_prior <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df_prior.stack()</span>
<span id="cb10-2">df_prior.head(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="7">
<pre><code>-1.2  -1.400000    0.000016
      -1.393636    0.000016
      -1.387273    0.000016
dtype: float64</code></pre>
</div>
</div>
<p>Now the dataframe for prior distribution is ready. Each row, column pair represents possible pair of values for both parameters.</p>
<p>Although it’s not necessary, I’m going to create a different dataframe that represents likelihoods.</p>
<div id="cell-15" class="cell" data-execution_count="8">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1">df_likeli <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.DataFrame(index<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>qs_cept, columns<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>qs_slope)</span>
<span id="cb12-2">df_likeli.fillna(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, inplace<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb12-3">df_likeli <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df_likeli.stack()</span>
<span id="cb12-4"></span>
<span id="cb12-5">df_likeli.head(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="8">
<pre><code>-1.2  -1.400000    1
      -1.393636    1
      -1.387273    1
dtype: int64</code></pre>
</div>
</div>
<p>Now, I ask this question: For each pair of intercept and slope, b0 and b1, how likely I am to see the observed data?</p>
<div id="cell-17" class="cell" data-execution_count="9">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1">df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'pop'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'pop'</span>].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">apply</span>(<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span> x: <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Vic'</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># dummy coding</span></span></code></pre></div>
</div>
<div id="cell-18" class="cell" data-execution_count="10">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Centering data</span></span>
<span id="cb15-2"></span>
<span id="cb15-3">offset <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'tail_l'</span>].mean().<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">round</span>()</span>
<span id="cb15-4">df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'x'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'tail_l'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> offset</span>
<span id="cb15-5">df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'y'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'pop'</span>]</span>
<span id="cb15-6"></span>
<span id="cb15-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># I refer our predictor as x from now on (for convenience), y becomes our target variable which takes 1 if possum is from Victoria region and 0 otherwise.</span></span></code></pre></div>
</div>
<div id="cell-19" class="cell" data-execution_count="11">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb16-1">agg_data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df.groupby(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'x'</span>)[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'y'</span>].agg([<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'sum'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'count'</span>])</span>
<span id="cb16-2">agg_data.head(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>).T</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="11">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th">x</th>
<th data-quarto-table-cell-role="th">-5.0</th>
<th data-quarto-table-cell-role="th">-3.5</th>
<th data-quarto-table-cell-role="th">-3.0</th>
<th data-quarto-table-cell-role="th">-2.5</th>
<th data-quarto-table-cell-role="th">-2.0</th>
<th data-quarto-table-cell-role="th">-1.5</th>
<th data-quarto-table-cell-role="th">-1.0</th>
<th data-quarto-table-cell-role="th">-0.5</th>
<th data-quarto-table-cell-role="th">0.0</th>
<th data-quarto-table-cell-role="th">0.5</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">sum</td>
<td>2</td>
<td>1</td>
<td>4</td>
<td>2</td>
<td>6</td>
<td>6</td>
<td>9</td>
<td>4</td>
<td>4</td>
<td>1</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">count</td>
<td>2</td>
<td>1</td>
<td>5</td>
<td>2</td>
<td>9</td>
<td>7</td>
<td>13</td>
<td>12</td>
<td>6</td>
<td>4</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
<div id="cell-20" class="cell" data-execution_count="12">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb17-1">ns <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> agg_data[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'count'</span>] <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># represents number of observation with corresponding x values</span></span>
<span id="cb17-2">ks <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> agg_data[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'sum'</span>] <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># represents successes, which means Victoria region</span></span></code></pre></div>
</div>
<div id="cell-21" class="cell" data-execution_count="13">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb18-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> scipy.special <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> expit <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># inverse of logit</span></span>
<span id="cb18-2"></span>
<span id="cb18-3">x_values <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> agg_data.index <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># these are centered</span></span>
<span id="cb18-4"></span>
<span id="cb18-5"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> cept, slope <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> df_likeli.index:</span>
<span id="cb18-6">    probs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> expit(cept <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> slope <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> x_values) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># transformation to probabilities</span></span>
<span id="cb18-7">    likelis <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> st.binom.pmf(ks, ns, probs) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># likelihood of each observation</span></span>
<span id="cb18-8">    df_likeli[cept, slope] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> likelis.prod() <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># likelihood of the whole data under the selected pair of parameter values</span></span></code></pre></div>
</div>
<div id="cell-22" class="cell" data-execution_count="14">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb19-1">df_likeli.head(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="14">
<pre><code>-1.2  -1.400000    4.812632e-15
      -1.393636    5.218338e-15
      -1.387273    5.654017e-15
      -1.380909    6.121460e-15
      -1.374545    6.622520e-15
      -1.368182    7.159117e-15
dtype: float64</code></pre>
</div>
</div>
<div id="cell-23" class="cell" data-execution_count="15">
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb21-1">df_posterior <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df_prior <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> df_likeli</span>
<span id="cb21-2">df_posterior.head(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># unnormalized</span></span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="15">
<pre><code>-1.2  -1.400000    7.749685e-20
      -1.393636    8.402985e-20
      -1.387273    9.104551e-20
      -1.380909    9.857265e-20
      -1.374545    1.066411e-19
      -1.368182    1.152818e-19
dtype: float64</code></pre>
</div>
</div>
<div id="cell-24" class="cell" data-execution_count="16">
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb23-1">df_posterior <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df_posterior <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> df_posterior.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>()</span>
<span id="cb23-2">df_posterior.head() <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># normalized</span></span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="16">
<pre><code>-1.2  -1.400000    8.913907e-09
      -1.393636    9.665351e-09
      -1.387273    1.047231e-08
      -1.380909    1.133810e-08
      -1.374545    1.226616e-08
dtype: float64</code></pre>
</div>
</div>
<div id="cell-25" class="cell" data-execution_count="17">
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb25-1">ut.plot_contour(df_likeli.unstack())</span>
<span id="cb25-2">ut.decorate(title <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Likelihood'</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://yigitasik.github.io/posts/Bayesian Way - Predictions out of Posterior Distribution/index_files/figure-html/cell-18-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<div id="cell-26" class="cell" data-execution_count="18">
<div class="sourceCode cell-code" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb26-1">ut.plot_contour(df_posterior.unstack())</span>
<span id="cb26-2">ut.decorate(title <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Posterior'</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://yigitasik.github.io/posts/Bayesian Way - Predictions out of Posterior Distribution/index_files/figure-html/cell-19-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>In Bayesian framework, the posterior distribution is a negotiation between the prior distribution and the likelihood: If the prior does not have much leverage (i.e., if it’s uninformative) then likelihood gets what it wants. In this case, since the prior was uniform, the likelihood dominated. Hence, both the likelihood and the posterior distribution are exactly the same.</p>
<section id="marginal-distributions" class="level3">
<h3 class="anchored" data-anchor-id="marginal-distributions">MARGINAL DISTRIBUTIONS</h3>
<p>Now, I sum the values for slope to get the marginal distribution. For example, to get the probability of slope being -1.2, I need to fix the slope to -1.2 and let the intercept vary and calculate the probabilities for every pair, and sum them up to get the total probability. Well, we do have the probabilities so only thing left to do is to sum them up.</p>
<div id="cell-30" class="cell" data-execution_count="19">
<div class="sourceCode cell-code" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb27-1">marginal_slope <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df_posterior.unstack().<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb27-2">marginal_slope.plot(label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Beta_1'</span>, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'C4'</span>)</span>
<span id="cb27-3"></span>
<span id="cb27-4"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">round</span>(marginal_slope.idxmax(), <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>))</span>
<span id="cb27-5"></span>
<span id="cb27-6">ut.decorate(</span>
<span id="cb27-7">    xlabel<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Possibilities'</span>,</span>
<span id="cb27-8">    ylabel<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'PDF'</span>,</span>
<span id="cb27-9">    title <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Posterior Distribution for Slope'</span></span>
<span id="cb27-10">)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>-0.706</code></pre>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://yigitasik.github.io/posts/Bayesian Way - Predictions out of Posterior Distribution/index_files/figure-html/cell-20-output-2.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>The mean of the distribution is around -0.7, which means that 1 unit increase in tail length decreases the log(odds) in favor of a possum being from Victorian, by 0.7.</p>
<div id="cell-32" class="cell" data-execution_count="20">
<div class="sourceCode cell-code" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb29-1">marginal_cept <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df_posterior.unstack().<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb29-2">marginal_cept.plot(label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Beta_0'</span>, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'C3'</span>)</span>
<span id="cb29-3"></span>
<span id="cb29-4"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">round</span>(marginal_cept.idxmax(), <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>))</span>
<span id="cb29-5"></span>
<span id="cb29-6">ut.decorate(</span>
<span id="cb29-7">    xlabel<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Possibilities'</span>,</span>
<span id="cb29-8">    ylabel<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'PDF'</span>,</span>
<span id="cb29-9">    title <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Posterior Distribution for the Intercept'</span></span>
<span id="cb29-10">)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>-0.321</code></pre>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://yigitasik.github.io/posts/Bayesian Way - Predictions out of Posterior Distribution/index_files/figure-html/cell-21-output-2.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>On the <a href="https://yigitasik.github.io/posts/Model%20Fitting%20with%20Likelihood/">previous post</a>, I had point estimates: Single pair of values for both parameters that maximizes the likelihood of the data. Now, instead of single pair, the result is distribution of possible values for each parameter.</p>
<p>One more trick before moving on: It is possible transform distributions to show probabilities. Let’s do it for the intercept, <img src="https://latex.codecogs.com/png.latex?%5Cbeta_0">.</p>
<div id="cell-34" class="cell" data-execution_count="21">
<div class="sourceCode cell-code" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb31-1">marginal_cept.index <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.exp(marginal_cept.index) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># getting rid of the log</span></span>
<span id="cb31-2">marginal_cept.index <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> marginal_cept.index <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> (marginal_cept.index <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># turning odds into probabilities</span></span>
<span id="cb31-3"></span>
<span id="cb31-4"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">round</span>(marginal_cept.idxmax(), <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>0.42</code></pre>
</div>
</div>
<p>So, the mean of the distribution is around 42%, standing for probability of Victorian possum when the tail length is 37 cm.</p>
</section>
<section id="predictions" class="level3">
<h3 class="anchored" data-anchor-id="predictions">PREDICTIONS</h3>
<p>So, how to make predictions out of this?</p>
<p>First, let’s put the posterior distribution to a pmf object.</p>
<div id="cell-38" class="cell" data-execution_count="22">
<div class="sourceCode cell-code" id="cb33" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb33-1">posterior_pmf <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> emd.Pmf(df_posterior)</span>
<span id="cb33-2">posterior_pmf.head()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="22">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">probs</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td rowspan="3" data-quarto-table-cell-role="th" data-valign="top">-1.2</td>
<td data-quarto-table-cell-role="th">-1.400000</td>
<td>8.913907e-09</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">-1.393636</td>
<td>9.665351e-09</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">-1.387273</td>
<td>1.047231e-08</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
<p>Pmf object offers “choice” method that allows to sample from the distribution. I’ll sample pairs from the joint distribution.</p>
<div id="cell-40" class="cell" data-execution_count="23">
<div class="sourceCode cell-code" id="cb34" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb34-1">sample <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> posterior_pmf.choice(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">201</span>)</span></code></pre></div>
</div>
<div id="cell-41" class="cell" data-execution_count="24">
<div class="sourceCode cell-code" id="cb35" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb35-1">min_tail_length <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'tail_l'</span>].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">min</span>() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb35-2">max_tail_length <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'tail_l'</span>].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">max</span>() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span></code></pre></div>
</div>
<p>Creating values to make predictions for.</p>
<div id="cell-43" class="cell" data-execution_count="25">
<div class="sourceCode cell-code" id="cb36" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb36-1">xs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.array([num<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>offset <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> num <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> np.arange(min_tail_length, max_tail_length, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>)])</span></code></pre></div>
</div>
<div id="cell-44" class="cell" data-execution_count="26">
<div class="sourceCode cell-code" id="cb37" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb37-1">pred <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.empty((<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(sample), <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(xs)))</span>
<span id="cb37-2"></span>
<span id="cb37-3"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i, (cept, slope) <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(sample):</span>
<span id="cb37-4">    odds <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.exp(cept <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> slope <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> xs)</span>
<span id="cb37-5">    pred[i] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> odds <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> (odds <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span></code></pre></div>
</div>
<p>Okay, ended up with a list of predictions for each x under sampled model parameters. Let’s put them into a graph to observe most likely values at different tail lengths.</p>
<div id="cell-46" class="cell" data-execution_count="27">
<div class="sourceCode cell-code" id="cb38" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb38-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> ps <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> pred:</span>
<span id="cb38-2">    plt.plot(xs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>offset, ps, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'C4'</span>, lw<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>, alpha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.3</span>)</span>
<span id="cb38-3"></span>
<span id="cb38-4">plt.scatter(df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'x'</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>offset, df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'y'</span>], s<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>)</span>
<span id="cb38-5">ut.decorate()</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://yigitasik.github.io/posts/Bayesian Way - Predictions out of Posterior Distribution/index_files/figure-html/cell-28-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<div id="cell-47" class="cell" data-execution_count="28">
<div class="sourceCode cell-code" id="cb39" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb39-1">low, median, high <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.percentile(pred, [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">95</span>], axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span></code></pre></div>
</div>
<div id="cell-48" class="cell" data-execution_count="29">
<div class="sourceCode cell-code" id="cb40" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb40-1">plt.fill_between(xs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>offset, low, high, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'C4'</span>, alpha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.2</span>, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'90% Credible Interval'</span>)</span>
<span id="cb40-2">plt.plot(xs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>offset, median, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'C4'</span>, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'model'</span>)</span>
<span id="cb40-3">plt.scatter(df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'x'</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>offset, df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'y'</span>], s<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>)</span>
<span id="cb40-4"></span>
<span id="cb40-5">plt.yticks([val<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> val <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> np.arange(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">11</span>)])</span>
<span id="cb40-6"></span>
<span id="cb40-7">ut.decorate()</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://yigitasik.github.io/posts/Bayesian Way - Predictions out of Posterior Distribution/index_files/figure-html/cell-30-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>Don’t worry about credible intervals / highest density intervals (HDIs), I think about talking about them in a different post.</p>
<p>Let’s make a prediction: For example, what’s the probability of Victorian if the tail length is 33 cm?</p>
<div id="cell-50" class="cell" data-execution_count="30">
<div class="sourceCode cell-code" id="cb41" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb41-1">low <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.Series(low, xs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>offset)</span>
<span id="cb41-2">median <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.Series(median, xs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>offset)</span>
<span id="cb41-3">high <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.Series(high, xs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>offset)</span></code></pre></div>
</div>
<div id="cell-51" class="cell" data-execution_count="31">
<div class="sourceCode cell-code" id="cb42" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb42-1">tail_l <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">33</span></span>
<span id="cb42-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(</span>
<span id="cb42-3">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">round</span>(median[tail_l], <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>),</span>
<span id="cb42-4">    (<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">round</span>(low[tail_l], <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>), <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">round</span>(high[tail_l], <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>))</span>
<span id="cb42-5">)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>0.929 (0.835, 0.976)</code></pre>
</div>
</div>
<p>The probability of Victorian given the tail length of 33 cm is at least 83.5%.</p>
<p>That’s pretty much it. I posted this blog as a follow-up to the <a href="https://yigitasik.github.io/posts/Model%20Fitting%20with%20Likelihood/">previous one</a>, hoping to make the relation between likelihood and posterior apparent. If you enjoyed it, you may consider subscribing to the email list.</p>
<p>Have a nice weekend!</p>


</section>

 ]]></description>
  <category>Stats</category>
  <category>Bayesian</category>
  <guid>https://yigitasik.github.io/posts/Bayesian Way - Predictions out of Posterior Distribution/</guid>
  <pubDate>Sat, 01 Feb 2025 21:00:00 GMT</pubDate>
  <media:content url="https://yigitasik.github.io/posts/Bayesian Way - Predictions out of Posterior Distribution/sampled_models.png" medium="image" type="image/png" height="108" width="144"/>
</item>
<item>
  <title>Understanding Model Fitting with Likelihood</title>
  <dc:creator>Yiğit Aşık</dc:creator>
  <link>https://yigitasik.github.io/posts/Model Fitting with Likelihood/</link>
  <description><![CDATA[ 





<p>In daily life, “probability” and “likelihood” are used interchangeably. But, they don’t refer to the same thing. I believe the most intuitive way to distinguish both is by thinking about the information you have while answering questions:</p>
<ul>
<li>Probability questions start with <em>known model</em> and <em>unknown data</em>. If someone asks you about the chance of seeing 6 heads in 10 coin tosses, you don’t have any observations. But, you have the model: You know the process that generates “heads” and “tails” and it’s parameter value (usually expressed as theta <em>θ</em>): 0.5.</li>
<li>Let’s say you did 10 coin tosses and ended up with 9 heads. How likely you were to observe 9 if the coin was fair? In this situation, the data is <em>known</em> and the question refers to the underlying data generating process (i.e., refers to the parameter).</li>
</ul>
<p>We can use this type of approach and let the parameter values <em>vary</em> and calculate the likelihood of the data under each value of the parameter(s).</p>
<div id="cell-2" class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span>
<span id="cb1-3"></span>
<span id="cb1-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> matplotlib <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb1-5"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> seaborn <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> sns</span>
<span id="cb1-6"></span>
<span id="cb1-7"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> statsmodels <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> sm</span>
<span id="cb1-8"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> empiricaldist <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> emd</span>
<span id="cb1-9"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> scipy.stats <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> st</span>
<span id="cb1-10"></span>
<span id="cb1-11"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> utils <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> ut</span>
<span id="cb1-12"></span>
<span id="cb1-13"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> warnings</span>
<span id="cb1-14"></span>
<span id="cb1-15">warnings.filterwarnings(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ignore'</span>)</span></code></pre></div>
</div>
<div id="cell-3" class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1">possum <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_csv(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'possum.csv'</span>, usecols<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'pop'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'tail_l'</span>])</span>
<span id="cb2-2">df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> possum.copy()</span>
<span id="cb2-3"></span>
<span id="cb2-4">df.head()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="2">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">pop</th>
<th data-quarto-table-cell-role="th">tail_l</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">0</td>
<td>Vic</td>
<td>36.0</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1</td>
<td>Vic</td>
<td>36.5</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">2</td>
<td>Vic</td>
<td>39.0</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">3</td>
<td>Vic</td>
<td>38.0</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">4</td>
<td>Vic</td>
<td>36.0</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
<p>We’ll use possum data, where each row corresponds to features of a possum from Australia and New Guinea. Let’s attempt to predict which region a possum is from as a function of tail length. (You can get the data from <a href="https://www.openintro.org/data/index.php?data=possum">here</a>)</p>
<p>I assume basic knowledge of logistic regression, which we’ll use to model the relationship between our predictor and the binary target variable.</p>
<div id="cell-6" class="cell" data-execution_count="3">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1">qs_cept <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.linspace(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">241</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># possible values for intercept (beta_0)</span></span>
<span id="cb3-2">qs_slope <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.linspace(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">81</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># possible values for slope (beta_1)</span></span></code></pre></div>
</div>
<div id="cell-7" class="cell" data-execution_count="4">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(qs_cept[:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>], <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>, qs_slope[:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>])</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[-3.    -2.975 -2.95  -2.925 -2.9  ] 
 [-1.    -0.975 -0.95  -0.925 -0.9  ]</code></pre>
</div>
</div>
<div id="cell-8" class="cell" data-execution_count="5">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1">df_likeli <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.DataFrame(index<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(qs_cept)), columns<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(qs_slope)))</span>
<span id="cb6-2">df_likeli.index <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> qs_cept</span>
<span id="cb6-3">df_likeli.columns <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> qs_slope</span></code></pre></div>
</div>
<div id="cell-9" class="cell" data-execution_count="6">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1">df_likeli.fillna(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, inplace<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb7-2"></span>
<span id="cb7-3">df_likeli.head()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="6">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">-1.000</th>
<th data-quarto-table-cell-role="th">-0.975</th>
<th data-quarto-table-cell-role="th">-0.950</th>
<th data-quarto-table-cell-role="th">-0.925</th>
<th data-quarto-table-cell-role="th">-0.900</th>
<th data-quarto-table-cell-role="th">-0.875</th>
<th data-quarto-table-cell-role="th">-0.850</th>
<th data-quarto-table-cell-role="th">-0.825</th>
<th data-quarto-table-cell-role="th">-0.800</th>
<th data-quarto-table-cell-role="th">-0.775</th>
<th data-quarto-table-cell-role="th">...</th>
<th data-quarto-table-cell-role="th">0.775</th>
<th data-quarto-table-cell-role="th">0.800</th>
<th data-quarto-table-cell-role="th">0.825</th>
<th data-quarto-table-cell-role="th">0.850</th>
<th data-quarto-table-cell-role="th">0.875</th>
<th data-quarto-table-cell-role="th">0.900</th>
<th data-quarto-table-cell-role="th">0.925</th>
<th data-quarto-table-cell-role="th">0.950</th>
<th data-quarto-table-cell-role="th">0.975</th>
<th data-quarto-table-cell-role="th">1.000</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">-3.000</td>
<td>1</td>
<td>1</td>
<td>1</td>
<td>1</td>
<td>1</td>
<td>1</td>
<td>1</td>
<td>1</td>
<td>1</td>
<td>1</td>
<td>...</td>
<td>1</td>
<td>1</td>
<td>1</td>
<td>1</td>
<td>1</td>
<td>1</td>
<td>1</td>
<td>1</td>
<td>1</td>
<td>1</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">-2.975</td>
<td>1</td>
<td>1</td>
<td>1</td>
<td>1</td>
<td>1</td>
<td>1</td>
<td>1</td>
<td>1</td>
<td>1</td>
<td>1</td>
<td>...</td>
<td>1</td>
<td>1</td>
<td>1</td>
<td>1</td>
<td>1</td>
<td>1</td>
<td>1</td>
<td>1</td>
<td>1</td>
<td>1</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">-2.950</td>
<td>1</td>
<td>1</td>
<td>1</td>
<td>1</td>
<td>1</td>
<td>1</td>
<td>1</td>
<td>1</td>
<td>1</td>
<td>1</td>
<td>...</td>
<td>1</td>
<td>1</td>
<td>1</td>
<td>1</td>
<td>1</td>
<td>1</td>
<td>1</td>
<td>1</td>
<td>1</td>
<td>1</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">-2.925</td>
<td>1</td>
<td>1</td>
<td>1</td>
<td>1</td>
<td>1</td>
<td>1</td>
<td>1</td>
<td>1</td>
<td>1</td>
<td>1</td>
<td>...</td>
<td>1</td>
<td>1</td>
<td>1</td>
<td>1</td>
<td>1</td>
<td>1</td>
<td>1</td>
<td>1</td>
<td>1</td>
<td>1</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">-2.900</td>
<td>1</td>
<td>1</td>
<td>1</td>
<td>1</td>
<td>1</td>
<td>1</td>
<td>1</td>
<td>1</td>
<td>1</td>
<td>1</td>
<td>...</td>
<td>1</td>
<td>1</td>
<td>1</td>
<td>1</td>
<td>1</td>
<td>1</td>
<td>1</td>
<td>1</td>
<td>1</td>
<td>1</td>
</tr>
</tbody>
</table>

<p>5 rows × 81 columns</p>
</div>
</div>
</div>
<p>So, what I have done is I created grid of equally spaced values both for intercept and the slope. I put them into a dataframe where columns represent possible values for slope and indices represent possible values for intercept.</p>
<p>Now, I ask this question: For each pair of intercept and slope, b0 and b1, how likely I am to see the observed data?</p>
<div id="cell-12" class="cell" data-execution_count="7">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1">df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'pop'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'pop'</span>].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">apply</span>(<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span> x: <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Vic'</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span></code></pre></div>
</div>
<div id="cell-13" class="cell" data-execution_count="8">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Centering data</span></span>
<span id="cb9-2"></span>
<span id="cb9-3">offset <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'tail_l'</span>].mean().<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">round</span>()</span>
<span id="cb9-4">df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'x'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'tail_l'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> offset</span>
<span id="cb9-5">df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'y'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'pop'</span>]</span>
<span id="cb9-6"></span>
<span id="cb9-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># I refer our predictor as x from now on (for convenience), y becomes our target variable which takes 1 if possum is from Victoria region and 0 otherwise.</span></span></code></pre></div>
</div>
<div id="cell-14" class="cell" data-execution_count="9">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1">agg_data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df.groupby(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'x'</span>)[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'y'</span>].agg([<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'sum'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'count'</span>])</span>
<span id="cb10-2">agg_data.head(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>).T</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="9">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th">x</th>
<th data-quarto-table-cell-role="th">-5.0</th>
<th data-quarto-table-cell-role="th">-3.5</th>
<th data-quarto-table-cell-role="th">-3.0</th>
<th data-quarto-table-cell-role="th">-2.5</th>
<th data-quarto-table-cell-role="th">-2.0</th>
<th data-quarto-table-cell-role="th">-1.5</th>
<th data-quarto-table-cell-role="th">-1.0</th>
<th data-quarto-table-cell-role="th">-0.5</th>
<th data-quarto-table-cell-role="th">0.0</th>
<th data-quarto-table-cell-role="th">0.5</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">sum</td>
<td>2</td>
<td>1</td>
<td>4</td>
<td>2</td>
<td>6</td>
<td>6</td>
<td>9</td>
<td>4</td>
<td>4</td>
<td>1</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">count</td>
<td>2</td>
<td>1</td>
<td>5</td>
<td>2</td>
<td>9</td>
<td>7</td>
<td>13</td>
<td>12</td>
<td>6</td>
<td>4</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
<div id="cell-15" class="cell" data-execution_count="10">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1">ns <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> agg_data[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'count'</span>] <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># represents number of observation with corresponding x values</span></span>
<span id="cb11-2">ks <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> agg_data[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'sum'</span>] <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># represents successes, which means Victoria region</span></span></code></pre></div>
</div>
<p>People get confused, rightfully, when they hear logistic regression getting mentioned as a linear model since all they see is an S-shaped function in a classic graph where x-axis represents the predictor and y-axis represents the probability. But that squiggle is a result of a transformation of log odds into probabilities. You may have deduced that before if you have taken a look at the equation:</p>
<p><img src="https://latex.codecogs.com/png.latex?%5Cdisplaystyle%20log_e(%5Cfrac%7Bp_i%7D%7B1%20-%20p_i%7D)%20=%20%5Cbeta_0%20+%20%5Cbeta_1%20x_%7B1i%7D%20+%20...%20+%20%5Cbeta_k%20x_%7Bk_i%7D"></p>
<p>However, we know that odds can be expressed as probabilities, so we’ll make that transformation.</p>
<p>For representation let’s select an intercept and a slope:</p>
<div id="cell-18" class="cell" data-execution_count="11">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1">cept <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb12-2">slope <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span></code></pre></div>
</div>
<div id="cell-19" class="cell" data-execution_count="12">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1">x_values <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> agg_data.index</span>
<span id="cb13-2">log_odds <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> cept <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> slope <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> x_values</span>
<span id="cb13-3">odds <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.exp(log_odds)</span>
<span id="cb13-4">ps <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> odds <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> (odds <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb13-5">ps[:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>] <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Probabilities coming from the model</span></span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="12">
<pre><code>Index([0.006692850924284856, 0.029312230751356316,  0.04742587317756679,
        0.07585818002124356,  0.11920292202211755,  0.18242552380635632],
      dtype='float64', name='x')</code></pre>
</div>
</div>
<p>How likely I am to observe k success in n trials with <img src="https://latex.codecogs.com/png.latex?p_i"> where <img src="https://latex.codecogs.com/png.latex?p_i"> comes from the model above.</p>
<div id="cell-21" class="cell" data-execution_count="13">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># How likely I am to observe k success in n trials with p_i where p_i comes from model</span></span>
<span id="cb15-2">likelis <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> st.binom.pmf(ks, ns, ps)</span>
<span id="cb15-3">likelis[:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>]</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="13">
<pre><code>array([4.47942535e-05, 2.93122308e-02, 2.40951774e-05, 5.75446348e-03,
       1.64675234e-04, 2.10930303e-04])</code></pre>
</div>
</div>
<div id="cell-22" class="cell" data-execution_count="14">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb17-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Taking the product for whole data</span></span>
<span id="cb17-2">likelis.prod()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="14">
<pre><code>6.58621661515704e-55</code></pre>
</div>
</div>
<p>Let’s take a look at the fit:</p>
<div id="cell-24" class="cell" data-execution_count="15">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb19-1">plt.figure(figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>))</span>
<span id="cb19-2"></span>
<span id="cb19-3">plt.plot(x_values<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>offset, ps, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'random selected model'</span>, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'C1'</span>)</span>
<span id="cb19-4">plt.scatter(df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'x'</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>offset, df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'y'</span>], s<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'data'</span>)</span>
<span id="cb19-5"></span>
<span id="cb19-6">ut.decorate()</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://yigitasik.github.io/posts/Model Fitting with Likelihood/index_files/figure-html/cell-16-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>This was for only one pair of intercept and slope, and it seems like we can do better. We calculated the likelihood for educational purposes here but in general, likelihoods by themselves does not mean much (I try to choose my words carefully here). Let’s try other possible pairs for our parameters and compare the likelihoods of each to take the one that maximizes the likelihood of the observed data.</p>
<div id="cell-26" class="cell" data-execution_count="16">
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb20-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> scipy.special <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> expit</span>
<span id="cb20-2"></span>
<span id="cb20-3">likelihood <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df_likeli.copy()</span>
<span id="cb20-4"></span>
<span id="cb20-5"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> cept <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> likelihood.index:</span>
<span id="cb20-6">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> slope <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> likelihood.columns:</span>
<span id="cb20-7">        probs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> expit(cept <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> slope <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> x_values) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># transformation to probabilities</span></span>
<span id="cb20-8">        likelis <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> st.binom.pmf(ks, ns, probs) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># likelihood of each observation</span></span>
<span id="cb20-9">        likelihood.loc[likelihood.index <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> cept, slope] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> likelis.prod() <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># likelihood of the whole data under the selected pair of parameter values</span></span></code></pre></div>
</div>
<div id="cell-27" class="cell" data-execution_count="17">
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb21-1">row, col <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> likelihood.stack().idxmax()</span>
<span id="cb21-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(row, col)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>-0.32499999999999973 -0.7</code></pre>
</div>
</div>
<p>This is the pair that maximizes the likelihood.</p>
<div id="cell-29" class="cell" data-execution_count="18">
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb23-1">cept <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> row</span>
<span id="cb23-2">slope <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> col</span>
<span id="cb23-3"></span>
<span id="cb23-4">log_odds <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> cept <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> slope <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> x_values</span>
<span id="cb23-5">odds <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.exp(log_odds)</span>
<span id="cb23-6">ps <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> odds <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> (odds <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span></code></pre></div>
</div>
<div id="cell-30" class="cell" data-execution_count="19">
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb24-1">plt.figure(figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>))</span>
<span id="cb24-2"></span>
<span id="cb24-3">plt.plot(x_values<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>offset, ps, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'model'</span>, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'C1'</span>)</span>
<span id="cb24-4">plt.scatter(df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'x'</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span>offset, df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'y'</span>], s<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'data'</span>)</span>
<span id="cb24-5"></span>
<span id="cb24-6">ut.decorate()</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://yigitasik.github.io/posts/Model Fitting with Likelihood/index_files/figure-html/cell-20-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>Let’s check our parameter estimates with the help of statsmodels:</p>
<div id="cell-32" class="cell" data-execution_count="20">
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb25-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> statsmodels.formula.api <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> smf</span>
<span id="cb25-2"></span>
<span id="cb25-3">formula <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'y ~ x'</span></span>
<span id="cb25-4">results <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> smf.logit(formula, data<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>df).fit(disp<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span>
<span id="cb25-5">results.params</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="20">
<pre><code>Intercept   -0.320498
x           -0.699641
dtype: float64</code></pre>
</div>
</div>
<p>We didn’t get those exact values since we used <em>grid approximation</em>, and the grid that I created didn’t include those exact values. Let’s drop a few details here:</p>
<ul>
<li>As the parameter space gets larger, the computational process becomes slower. So, there’s that trade-off between precision and time.</li>
<li>We only had two parameters to estimate and that’s OK for grid approach. However, once you start to get more than three, number of possible combination for parameters gets incredibly large which makes grid approach infeasible.</li>
<li>Another thing is related to the number of observation while calculating the likelihood for the whole data: When you try to take the product of the likelihoods with many observations, you may ran into an issue called <em>underflow</em>, where computer has trouble multiplying bunch of values around zero. Hence, <em>log likelihood</em> comes to rescue: Logarithms takes the values around zero away from zero, thus solving the underflow problem.</li>
</ul>
<p>I hope this example made likelihoods more intuitive. There’s more to know about them: Are they probability densities? Are they probability masses? Or are they both? That’s for a whole different post, things can get messy in a second. However, it’s important to understand likelihoods in the context above, since they can be used to update our beliefs about parameters which is what we do with Bayesian methods.</p>
<p>As usual, have a nice weekend :)</p>



 ]]></description>
  <category>Stats</category>
  <category>Bayesian</category>
  <guid>https://yigitasik.github.io/posts/Model Fitting with Likelihood/</guid>
  <pubDate>Fri, 24 Jan 2025 21:00:00 GMT</pubDate>
</item>
<item>
  <title>Understanding Distribution of log(odds ratio) Through Simulation</title>
  <dc:creator>Yiğit Aşık</dc:creator>
  <link>https://yigitasik.github.io/posts/Understanding distribution of log(odds ratio) through simulation/</link>
  <description><![CDATA[ 





<div id="e9f50ba4-bbd2-48ca-a467-6fe5d747be9c" class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span>
<span id="cb1-3"></span>
<span id="cb1-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb1-5"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> matplotlib.ticker <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> AutoMinorLocator</span>
<span id="cb1-6"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> seaborn <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> sns</span>
<span id="cb1-7"></span>
<span id="cb1-8"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> scipy.stats <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> st</span></code></pre></div>
</div>
<p>I wanted to put this example out because one of my colleague asked me a question about result table of logistic regression. Back in the day while I was watching the <a href="https://www.youtube.com/watch?v=8nm0G-1uJzA">video</a>, Josh Starmer said distribution of log(odds ratio) is approximately normal and gave an idea of how to simulate. I didn’t end up his way of simulating, if you want that maybe you should follow the approach in the video but we actually both do the same thing.</p>
<p>Let’s say we have the following information:</p>
<div id="d0f4e0f8" class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1">cancer_gene_cb <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.crosstab([<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'yes'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'no'</span>], [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'yes'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'no'</span>], rownames<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'mutated_gene'</span>], colnames<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'has_cancer'</span>])</span>
<span id="cb2-2">cancer_gene_cb.loc[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'yes'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'yes'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">23</span></span>
<span id="cb2-3">cancer_gene_cb.loc[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'yes'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'no'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">117</span></span>
<span id="cb2-4">cancer_gene_cb.loc[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'no'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'no'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">210</span></span>
<span id="cb2-5">cancer_gene_cb.loc[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'no'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'yes'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span></span>
<span id="cb2-6"></span>
<span id="cb2-7">cancer_gene_cb</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="2">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th">has_cancer</th>
<th data-quarto-table-cell-role="th">no</th>
<th data-quarto-table-cell-role="th">yes</th>
</tr>
<tr class="even">
<th data-quarto-table-cell-role="th">mutated_gene</th>
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th"></th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">no</td>
<td>210</td>
<td>6</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">yes</td>
<td>117</td>
<td>23</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
<p>Let’s represent the information in a different way. For the ones who are not familiar, <em>odds</em> is ratio of something happening to something not happening. When there’s <em>odds ratio</em>, it actually means <em>ratio of odds</em>.</p>
<div id="09e7b107" class="cell" data-execution_count="3">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Given the mutated version of the gene, odds of having cancer</span></span>
<span id="cb3-2">mutated_gene_odds <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> cancer_gene_cb.loc[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'yes'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'yes'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> cancer_gene_cb.loc[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'yes'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'no'</span>] <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 23 / 117</span></span>
<span id="cb3-3"></span>
<span id="cb3-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Given the wild version of the gene, odds of having cancer</span></span>
<span id="cb3-5">wild_gene_odds <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> cancer_gene_cb.loc[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'no'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'yes'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> cancer_gene_cb.loc[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'no'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'no'</span>] <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 6 / 210</span></span>
<span id="cb3-6"></span>
<span id="cb3-7">odds_ratio <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> mutated_gene_odds <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> wild_gene_odds <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 6.88</span></span>
<span id="cb3-8"></span>
<span id="cb3-9">log_odds_ratio <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">round</span>(np.log(odds_ratio), <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb3-10"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(log_odds_ratio)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>1.93</code></pre>
</div>
</div>
<p>It seems like people who have the mutated gene have higher odds (i.e., 6.88 times more likely) in terms of having cancer. But I wonder if this is statistically significant.<br>
So, I want to do a simulation see how often would I see the <em>log(odds ratio)</em> of 1.93 under the assumption of no relationship between the two variables. If I don’t see it very often, it makes sense to act as if there’s a difference.<br>
</p>
<p>Let’s go through a simulation:</p>
<div id="cd5e4812-3a2e-4e57-9440-9c538e550fc0" class="cell" data-execution_count="4">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1">li <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [] <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># creating an empty bag</span></span>
<span id="cb5-2">sample_size <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">356</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># our sample size</span></span></code></pre></div>
</div>
<p>Creating 29 “cancer” written cards and putting them in a bag, representing the number of people with cancer in our sample.</p>
<div id="35f2b2bc-4ed2-4f88-ab7f-f7353f8bbd44" class="cell" data-execution_count="5">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">29</span>):</span>
<span id="cb6-2">    li.append(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'cancer'</span>)</span></code></pre></div>
</div>
<p>Creating 327 “no cancer” written cards and putting them in a bag, representing the number of people without cancer in our sample.</p>
<div id="b33cc8bf-c241-4029-bd7a-abb71237ec9e" class="cell" data-execution_count="6">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> j <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">327</span>):</span>
<span id="cb7-2">    li.append(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'no cancer'</span>)</span></code></pre></div>
</div>
<div id="7a16fbdb-a3c6-462d-a980-1f8245d35b2a" class="cell" data-execution_count="7">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1">mutated_version <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb8-2">wild_version <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span></code></pre></div>
</div>
<p>There are 140 people with mutated variant of the gene, 216 people with wild variant. Under the assumption of no relationship between the cancer and the gene variant, I’d expect no difference between odds of cancer given the mutated gene and given the wild gene. In other words, knowing the gene variant does not provide any meaningful information.</p>
<div id="df50bdf6-67bf-4b59-83e6-d20a482cff3f" class="cell" data-execution_count="8">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10000</span>):</span>
<span id="cb9-2">    sampl_all <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.random.choice(li, size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(li)) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#  Shuffling the bag (cards)</span></span>
<span id="cb9-3"></span>
<span id="cb9-4">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#  Taking 140 of them (representing the number of participants with mutated gene)</span></span>
<span id="cb9-5">    sampl_mutated_version <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> sampl_all[:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">140</span>].tolist()</span>
<span id="cb9-6">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># and calculating the odds in favor of cancer in the mutated gene group</span></span>
<span id="cb9-7">    mutated_version.append(sampl_mutated_version.count(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'cancer'</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> sampl_mutated_version.count(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'no cancer'</span>)) </span>
<span id="cb9-8"></span>
<span id="cb9-9">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#  Taking rest of the cards (representing the number of participants in the non-mutated gene group)</span></span>
<span id="cb9-10">    sampl_wild_version <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> sampl_all[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">140</span>:].tolist() </span>
<span id="cb9-11">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#  and calculating the odds in favor of cancer in the non-mutated gene group</span></span>
<span id="cb9-12">    wild_version.append(sampl_wild_version.count(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'cancer'</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> sampl_wild_version.count(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'no cancer'</span>))</span></code></pre></div>
</div>
<div id="6395ba80-0733-4ad3-bc46-907e88526c3d" class="cell" data-execution_count="9">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1">mutated_version_nd <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.array(mutated_version)</span>
<span id="cb10-2">wild_version_nd <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.array(wild_version)</span></code></pre></div>
</div>
<div id="b9526e6c-20db-4541-80ff-406691a2aabd" class="cell" data-execution_count="10">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1">odds_ratio <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> mutated_version_nd <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> wild_version_nd <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#  Calculating odds ratio</span></span></code></pre></div>
</div>
<div id="6f8c47eb-5153-4122-a226-ac557dd318ca" class="cell" data-execution_count="11">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1">log_odds_ratio <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.log(odds_ratio) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#  Calculating log(odds ratio)</span></span></code></pre></div>
</div>
<div id="d7ade6ce-6260-4535-b8d9-a15acda905f7" class="cell" data-execution_count="12">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#  Plotting the distribution of log(odds ratio)</span></span>
<span id="cb13-2"></span>
<span id="cb13-3">fig <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.figure(figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>))</span>
<span id="cb13-4">g <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> sns.histplot(data<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>log_odds_ratio, bins<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">40</span>, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"orange"</span>, edgecolor<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"black"</span>)</span>
<span id="cb13-5"></span>
<span id="cb13-6">g.xaxis.set_minor_locator(AutoMinorLocator())</span>
<span id="cb13-7"></span>
<span id="cb13-8">g.tick_params(which<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"both"</span>, width<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb13-9">g.tick_params(which<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"major"</span>, length<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>)</span>
<span id="cb13-10">g.tick_params(which<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"minor"</span>, length<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>)</span>
<span id="cb13-11"></span>
<span id="cb13-12">plt.show(g)</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://yigitasik.github.io/posts/Understanding distribution of log(odds ratio) through simulation/index_files/figure-html/cell-13-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<div id="63eaa46b" class="cell" data-execution_count="13">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">round</span>(np.mean(log_odds_ratio), <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>))</span>
<span id="cb14-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">round</span>(np.std(log_odds_ratio), <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>-0.02
0.42</code></pre>
</div>
</div>
<p>Apparently it can be approximated by normal distribution. It is centered around zero with standard deviation of 0.42. Let’s see how often I would observe a result as or more extreme as 1.93.</p>
<div id="b853e4a8-078c-46dd-80e6-5af02d3322b5" class="cell" data-execution_count="14">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb16-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>([val <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> val <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> log_odds_ratio <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">abs</span>(val) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.93</span>]) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(log_odds_ratio)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="14">
<pre><code>0.0002</code></pre>
</div>
</div>
<p>Since I simulate the whole thing under the assumption of no difference between groups, selected alpha level should correspond to my long-term type I error rate. If alpha = 0.05, I should observe 5% values to fall more than 2 standard deviation (approximately). Let’s check if it’s the case.</p>
<div id="a6a20116" class="cell" data-execution_count="15">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb18-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>([val <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> val <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> log_odds_ratio <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">abs</span>(val) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> np.std(log_odds_ratio)]) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(log_odds_ratio)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="15">
<pre><code>0.0479</code></pre>
</div>
</div>
<p>I really tried to simplify things here, to not make a huge mess out of this but another approach would be to fit a theoretical distribution, such as normal distribution, since that’s what the Wald Test does and then step to integrating over the area that fall larger than absolute value of 1.93 . It also requires a few extra steps, such as calculating <em>estimated</em> standard deviation. For the ones who would like to play with the idea, here’s the <a href="https://youtu.be/8nm0G-1uJzA?si=9BhhXKQ9kPMZ2c7c">video link</a> again.</p>
<p>Have a nice weekend.</p>



 ]]></description>
  <category>Stats</category>
  <category>Inference</category>
  <guid>https://yigitasik.github.io/posts/Understanding distribution of log(odds ratio) through simulation/</guid>
  <pubDate>Fri, 17 Jan 2025 21:00:00 GMT</pubDate>
</item>
<item>
  <title>Which p-values to expect under different realities?</title>
  <dc:creator>Yiğit Aşık</dc:creator>
  <link>https://yigitasik.github.io/posts/p-value distribution/</link>
  <description><![CDATA[ 





<p>Statistics classes in social sciences, during an undergraduate degree, revolve around p-values mainly. Despite that, I have never seen the mention of p-value distributions. So, here we go:</p>
<div id="cell-2" class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> scipy.stats <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> st</span>
<span id="cb1-3"></span>
<span id="cb1-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> matplotlib <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb1-5"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> matplotlib.ticker <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> AutoMinorLocator</span>
<span id="cb1-6"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> seaborn <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> sns</span>
<span id="cb1-7"></span>
<span id="cb1-8"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> warnings</span>
<span id="cb1-9">warnings.filterwarnings(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ignore'</span>)</span></code></pre></div>
</div>
<p>How does the p-value distribution look like when there is <strong>no</strong> effect?</p>
<div id="cell-4" class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1">p_val_list <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [] <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># a bag to hold p-values</span></span>
<span id="cb2-2"></span>
<span id="cb2-3"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000000</span>):</span>
<span id="cb2-4">    ctrl <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.random.normal(loc<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, scale<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>, size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">51</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># sampling from a normal distribution with mean 100, std 15</span></span>
<span id="cb2-5">    trt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.random.normal(loc<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, scale<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>, size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">51</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># sampling from a normal distribution with mean 100, std 15</span></span>
<span id="cb2-6">    p_val <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> st.ttest_ind(trt, ctrl)[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># doing a t-test and grabbing the p-value</span></span>
<span id="cb2-7"></span>
<span id="cb2-8">    p_val_list.append(p_val) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># storing the p-value in the bag</span></span></code></pre></div>
</div>
<div id="cell-5" class="cell" data-execution_count="3">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1">fig <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.figure(figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>))</span>
<span id="cb3-2">ax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> fig.add_subplot(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb3-3"></span>
<span id="cb3-4">plt.ticklabel_format(style<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'plain'</span>, axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'y'</span>)</span>
<span id="cb3-5"></span>
<span id="cb3-6">ax.hist(p_val_list, bins<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, edgecolor<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'black'</span>, linewidth<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.9</span>)</span>
<span id="cb3-7">ax.xaxis.set_minor_locator(AutoMinorLocator(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>))</span>
<span id="cb3-8">ax.yaxis.set_minor_locator(AutoMinorLocator(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>))</span>
<span id="cb3-9">ax.tick_params(which<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'both'</span>, width<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb3-10">ax.tick_params(which<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'major'</span>, length<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>)</span>
<span id="cb3-11">ax.tick_params(which<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'minor'</span>, length<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>)</span>
<span id="cb3-12"></span>
<span id="cb3-13">ax.set_ylim(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000000</span>)</span>
<span id="cb3-14">plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'When the true effect size = 0'</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="3">
<pre><code>Text(0.5, 1.0, 'When the true effect size = 0')</code></pre>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://yigitasik.github.io/posts/p-value distribution/index_files/figure-html/cell-4-output-2.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>Every p-value is equally likely. That’s why chosen alpha level corresponds to how often you will fool yourself in the long run, when there is no effect.<br>
If the chosen alpha level is .10, then under the null hypothesis 10 percent of the p-values fall below 0.10.</p>
<div id="cell-7" class="cell" data-execution_count="4">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1">power <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [val <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> val <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> p_val_list <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> val <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.05</span>] <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># .05 is the chosen for alpha</span></span>
<span id="cb5-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Power: '</span>, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">round</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(power) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(p_val_list), <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Power:  0.05</code></pre>
</div>
</div>
<p>This is our long-term type I error rate, since theoretically the power is undefined in this case (i.e., the null is the truth). We don’t expect to fool ourselves more than 5% in the long run, when there is no effect.</p>
<p>Let’s see what happens when there is an effect:</p>
<div id="cell-10" class="cell" data-execution_count="5">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1">p_val_list <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb7-2"></span>
<span id="cb7-3"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000000</span>):</span>
<span id="cb7-4">    ctrl <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.random.normal(loc<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, scale<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>, size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">51</span>)</span>
<span id="cb7-5">    trt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.random.normal(loc<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">104.5</span>, scale<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>, size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">51</span>)</span>
<span id="cb7-6">    p_val <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> st.ttest_ind(trt, ctrl)[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span>
<span id="cb7-7"></span>
<span id="cb7-8">    p_val_list.append(p_val)</span></code></pre></div>
</div>
<div id="cell-11" class="cell" data-execution_count="6">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1">fig <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.figure(figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>))</span>
<span id="cb8-2">ax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> fig.add_subplot(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb8-3"></span>
<span id="cb8-4">plt.ticklabel_format(style<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'plain'</span>, axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'y'</span>)</span>
<span id="cb8-5"></span>
<span id="cb8-6">ax.hist(p_val_list, bins<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, edgecolor<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'black'</span>, linewidth<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.9</span>)</span>
<span id="cb8-7">ax.axhline(y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10000</span>, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'r'</span>, linestyle<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'--'</span>)</span>
<span id="cb8-8"></span>
<span id="cb8-9">ax.xaxis.set_minor_locator(AutoMinorLocator(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>))</span>
<span id="cb8-10">ax.yaxis.set_minor_locator(AutoMinorLocator(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>))</span>
<span id="cb8-11">ax.tick_params(which<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'both'</span>, width<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb8-12">ax.tick_params(which<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'major'</span>, length<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>)</span>
<span id="cb8-13">ax.tick_params(which<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'minor'</span>, length<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>)</span>
<span id="cb8-14"></span>
<span id="cb8-15">ax.set_ylim(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000000</span>)</span>
<span id="cb8-16">plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'For Cohen</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\'</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">s d of 0.3'</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="6">
<pre><code>Text(0.5, 1.0, "For Cohen's d of 0.3")</code></pre>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://yigitasik.github.io/posts/p-value distribution/index_files/figure-html/cell-7-output-2.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<div id="cell-12" class="cell" data-execution_count="7">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1">power <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [val <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> val <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> p_val_list <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> val <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.05</span>] <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># .05 is the chosen for alpha</span></span>
<span id="cb10-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Power: '</span>, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">round</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(power) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(p_val_list), <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Power:  0.32</code></pre>
</div>
</div>
<div id="cell-13" class="cell" data-execution_count="8">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1">fig <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.figure(figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>))</span>
<span id="cb12-2">ax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> fig.add_subplot(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb12-3"></span>
<span id="cb12-4">plt.ticklabel_format(style<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'plain'</span>, axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'y'</span>)</span>
<span id="cb12-5"></span>
<span id="cb12-6">ax.hist([val <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> val <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> p_val_list <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> val <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.05</span>], bins<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, edgecolor<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'black'</span>, linewidth<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.9</span>)</span>
<span id="cb12-7">ax.axhline(y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10000</span>, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'r'</span>, linestyle<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'--'</span>)</span>
<span id="cb12-8"></span>
<span id="cb12-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># ax.xaxis.set_minor_locator(AutoMinorLocator(5))</span></span>
<span id="cb12-10">ax.yaxis.set_minor_locator(AutoMinorLocator(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>))</span>
<span id="cb12-11">ax.tick_params(which<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'both'</span>, width<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb12-12">ax.tick_params(which<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'major'</span>, length<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>)</span>
<span id="cb12-13">ax.tick_params(which<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'minor'</span>, length<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>)</span>
<span id="cb12-14"></span>
<span id="cb12-15">ax.set_xlim(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.05</span>)</span>
<span id="cb12-16">ax.set_ylim(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000000</span>)</span>
<span id="cb12-17">plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'For Cohen</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\'</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">s d of 0.3'</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="8">
<pre><code>Text(0.5, 1.0, "For Cohen's d of 0.3")</code></pre>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://yigitasik.github.io/posts/p-value distribution/index_files/figure-html/cell-9-output-2.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<div id="cell-14" class="cell" data-execution_count="9">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1">p_val_list <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb14-2"></span>
<span id="cb14-3"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000000</span>):</span>
<span id="cb14-4">    ctrl <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.random.normal(loc<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, scale<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>, size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">51</span>)</span>
<span id="cb14-5">    trt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.random.normal(loc<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">107.5</span>, scale<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>, size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">51</span>)</span>
<span id="cb14-6">    p_val <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> st.ttest_ind(trt, ctrl)[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span>
<span id="cb14-7"></span>
<span id="cb14-8">    p_val_list.append(p_val)</span></code></pre></div>
</div>
<div id="cell-15" class="cell" data-execution_count="10">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1">fig <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.figure(figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>))</span>
<span id="cb15-2">ax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> fig.add_subplot(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb15-3"></span>
<span id="cb15-4">plt.ticklabel_format(style<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'plain'</span>, axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'y'</span>)</span>
<span id="cb15-5"></span>
<span id="cb15-6">ax.hist(p_val_list, bins<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, edgecolor<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'black'</span>, linewidth<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.9</span>)</span>
<span id="cb15-7">ax.axhline(y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10000</span>, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'r'</span>, linestyle<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'--'</span>, alpha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.5</span>)</span>
<span id="cb15-8"></span>
<span id="cb15-9">ax.xaxis.set_minor_locator(AutoMinorLocator(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>))</span>
<span id="cb15-10">ax.yaxis.set_minor_locator(AutoMinorLocator(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>))</span>
<span id="cb15-11">ax.tick_params(which<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'both'</span>, width<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb15-12">ax.tick_params(which<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'major'</span>, length<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>)</span>
<span id="cb15-13">ax.tick_params(which<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'minor'</span>, length<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>)</span>
<span id="cb15-14"></span>
<span id="cb15-15">ax.set_ylim(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000000</span>)</span>
<span id="cb15-16">plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'For Cohen</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\'</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">s d of 0.5'</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="10">
<pre><code>Text(0.5, 1.0, "For Cohen's d of 0.5")</code></pre>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://yigitasik.github.io/posts/p-value distribution/index_files/figure-html/cell-11-output-2.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<div id="cell-16" class="cell" data-execution_count="11">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb17-1">power <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [val <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> val <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> p_val_list <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> val <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.05</span>] <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># .05 is the chosen for alpha</span></span>
<span id="cb17-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Power: '</span>, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">round</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(power) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(p_val_list), <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Power:  0.71</code></pre>
</div>
</div>
<div id="cell-17" class="cell" data-execution_count="12">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb19-1">fig <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.figure(figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>))</span>
<span id="cb19-2">ax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> fig.add_subplot(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb19-3"></span>
<span id="cb19-4">plt.ticklabel_format(style<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'plain'</span>, axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'y'</span>)</span>
<span id="cb19-5"></span>
<span id="cb19-6">ax.hist([val <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> val <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> p_val_list <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> val <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.05</span>], bins<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, edgecolor<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'black'</span>, linewidth<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.9</span>)</span>
<span id="cb19-7">ax.axhline(y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10000</span>, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'r'</span>, linestyle<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'--'</span>)</span>
<span id="cb19-8"></span>
<span id="cb19-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># ax.xaxis.set_minor_locator(AutoMinorLocator(5))</span></span>
<span id="cb19-10">ax.yaxis.set_minor_locator(AutoMinorLocator(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>))</span>
<span id="cb19-11">ax.tick_params(which<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'both'</span>, width<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb19-12">ax.tick_params(which<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'major'</span>, length<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>)</span>
<span id="cb19-13">ax.tick_params(which<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'minor'</span>, length<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>)</span>
<span id="cb19-14"></span>
<span id="cb19-15">ax.set_xlim(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.05</span>)</span>
<span id="cb19-16">ax.set_ylim(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000000</span>)</span>
<span id="cb19-17">plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'For Cohen</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\'</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">s d of 0.5'</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="12">
<pre><code>Text(0.5, 1.0, "For Cohen's d of 0.5")</code></pre>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://yigitasik.github.io/posts/p-value distribution/index_files/figure-html/cell-13-output-2.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<div id="cell-18" class="cell" data-execution_count="13">
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb21-1">p_val_list <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb21-2"></span>
<span id="cb21-3"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000000</span>):</span>
<span id="cb21-4">    ctrl <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.random.normal(loc<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, scale<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>, size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">51</span>)</span>
<span id="cb21-5">    trt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.random.normal(loc<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">109.5</span>, scale<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>, size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">51</span>)</span>
<span id="cb21-6">    p_val <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> st.ttest_ind(trt, ctrl)[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span>
<span id="cb21-7"></span>
<span id="cb21-8">    p_val_list.append(p_val)</span></code></pre></div>
</div>
<div id="cell-19" class="cell" data-execution_count="14">
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb22-1">fig <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.figure(figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>))</span>
<span id="cb22-2">ax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> fig.add_subplot(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb22-3"></span>
<span id="cb22-4">plt.ticklabel_format(style<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'plain'</span>, axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'y'</span>)</span>
<span id="cb22-5"></span>
<span id="cb22-6">ax.hist(p_val_list, bins<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, edgecolor<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'black'</span>, linewidth<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.9</span>)</span>
<span id="cb22-7">ax.axhline(y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10000</span>, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'r'</span>, linestyle<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'--'</span>, alpha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.5</span>)</span>
<span id="cb22-8"></span>
<span id="cb22-9">ax.xaxis.set_minor_locator(AutoMinorLocator(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>))</span>
<span id="cb22-10">ax.yaxis.set_minor_locator(AutoMinorLocator(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>))</span>
<span id="cb22-11">ax.tick_params(which<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'both'</span>, width<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb22-12">ax.tick_params(which<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'major'</span>, length<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>)</span>
<span id="cb22-13">ax.tick_params(which<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'minor'</span>, length<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>)</span>
<span id="cb22-14"></span>
<span id="cb22-15">ax.set_ylim(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000000</span>)</span>
<span id="cb22-16">plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'For Cohen</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\'</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">s d of 0.7'</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="14">
<pre><code>Text(0.5, 1.0, "For Cohen's d of 0.7")</code></pre>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://yigitasik.github.io/posts/p-value distribution/index_files/figure-html/cell-15-output-2.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<div id="cell-20" class="cell" data-execution_count="15">
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb24-1">power <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [val <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> val <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> p_val_list <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> val <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.05</span>] <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># .05 is the chosen for alpha</span></span>
<span id="cb24-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Power: '</span>, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">round</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(power) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(p_val_list), <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Power:  0.89</code></pre>
</div>
</div>
<div id="cell-21" class="cell" data-execution_count="16">
<div class="sourceCode cell-code" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb26-1">fig <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.figure(figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>))</span>
<span id="cb26-2">ax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> fig.add_subplot(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb26-3"></span>
<span id="cb26-4">plt.ticklabel_format(style<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'plain'</span>, axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'y'</span>)</span>
<span id="cb26-5"></span>
<span id="cb26-6">ax.hist([val <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> val <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> p_val_list <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> val <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.05</span>], bins<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, edgecolor<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'black'</span>, linewidth<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.9</span>)</span>
<span id="cb26-7">ax.axhline(y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10000</span>, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'r'</span>, linestyle<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'--'</span>)</span>
<span id="cb26-8"></span>
<span id="cb26-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># ax.xaxis.set_minor_locator(AutoMinorLocator(5))</span></span>
<span id="cb26-10">ax.yaxis.set_minor_locator(AutoMinorLocator(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>))</span>
<span id="cb26-11">ax.tick_params(which<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'both'</span>, width<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb26-12">ax.tick_params(which<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'major'</span>, length<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>)</span>
<span id="cb26-13">ax.tick_params(which<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'minor'</span>, length<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>)</span>
<span id="cb26-14"></span>
<span id="cb26-15">ax.set_xlim(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.05</span>)</span>
<span id="cb26-16">ax.set_ylim(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000000</span>)</span>
<span id="cb26-17">plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'For Cohen</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\'</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">s d of 0.7'</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="16">
<pre><code>Text(0.5, 1.0, "For Cohen's d of 0.7")</code></pre>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://yigitasik.github.io/posts/p-value distribution/index_files/figure-html/cell-17-output-2.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<div id="cell-22" class="cell" data-execution_count="17">
<div class="sourceCode cell-code" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb28-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>([val <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> val <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> p_val_list <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> val <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.00</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">and</span> val <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.01</span>]) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(p_val_list))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>0.715716</code></pre>
</div>
</div>
<div id="cell-23" class="cell" data-execution_count="18">
<div class="sourceCode cell-code" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb30-1">p_val_list <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb30-2"></span>
<span id="cb30-3"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000000</span>):</span>
<span id="cb30-4">    ctrl <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.random.normal(loc<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, scale<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>, size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">51</span>)</span>
<span id="cb30-5">    trt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.random.normal(loc<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">112</span>, scale<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>, size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">51</span>)</span>
<span id="cb30-6">    p_val <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> st.ttest_ind(trt, ctrl)[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span>
<span id="cb30-7"></span>
<span id="cb30-8">    p_val_list.append(p_val)</span></code></pre></div>
</div>
<div id="cell-24" class="cell" data-execution_count="19">
<div class="sourceCode cell-code" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb31-1">fig <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.figure(figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>))</span>
<span id="cb31-2">ax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> fig.add_subplot(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb31-3"></span>
<span id="cb31-4">plt.ticklabel_format(style<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'plain'</span>, axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'y'</span>)</span>
<span id="cb31-5"></span>
<span id="cb31-6">ax.hist(p_val_list, bins<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, edgecolor<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'black'</span>, linewidth<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.9</span>)</span>
<span id="cb31-7">ax.axhline(y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10000</span>, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'r'</span>, linestyle<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'--'</span>)</span>
<span id="cb31-8"></span>
<span id="cb31-9">ax.xaxis.set_minor_locator(AutoMinorLocator(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>))</span>
<span id="cb31-10">ax.yaxis.set_minor_locator(AutoMinorLocator(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>))</span>
<span id="cb31-11">ax.tick_params(which<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'both'</span>, width<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb31-12">ax.tick_params(which<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'major'</span>, length<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>)</span>
<span id="cb31-13">ax.tick_params(which<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'minor'</span>, length<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>)</span>
<span id="cb31-14"></span>
<span id="cb31-15">ax.set_xticks(np.arange(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.05</span>))</span>
<span id="cb31-16">ax.set_ylim(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000000</span>)</span>
<span id="cb31-17">plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'For Cohen</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\'</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">s d of 0.8'</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="19">
<pre><code>Text(0.5, 1.0, "For Cohen's d of 0.8")</code></pre>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://yigitasik.github.io/posts/p-value distribution/index_files/figure-html/cell-20-output-2.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<div id="cell-25" class="cell" data-execution_count="20">
<div class="sourceCode cell-code" id="cb33" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb33-1">fig <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.figure(figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>))</span>
<span id="cb33-2">ax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> fig.add_subplot(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb33-3"></span>
<span id="cb33-4">plt.ticklabel_format(style<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'plain'</span>, axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'y'</span>)</span>
<span id="cb33-5"></span>
<span id="cb33-6">ax.hist([val <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> val <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> p_val_list <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> val <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.05</span>], bins<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, edgecolor<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'black'</span>, linewidth<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.9</span>)</span>
<span id="cb33-7">ax.axhline(y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10000</span>, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'r'</span>, linestyle<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'--'</span>)</span>
<span id="cb33-8"></span>
<span id="cb33-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># ax.xaxis.set_minor_locator(AutoMinorLocator(5))</span></span>
<span id="cb33-10">ax.yaxis.set_minor_locator(AutoMinorLocator(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>))</span>
<span id="cb33-11">ax.tick_params(which<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'both'</span>, width<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb33-12">ax.tick_params(which<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'major'</span>, length<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>)</span>
<span id="cb33-13">ax.tick_params(which<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'minor'</span>, length<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>)</span>
<span id="cb33-14"></span>
<span id="cb33-15">ax.set_xlim(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.05</span>)</span>
<span id="cb33-16">ax.set_ylim(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000000</span>)</span>
<span id="cb33-17">plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'For Cohen</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\'</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">s d of 0.8'</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="20">
<pre><code>Text(0.5, 1.0, "For Cohen's d of 0.8")</code></pre>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://yigitasik.github.io/posts/p-value distribution/index_files/figure-html/cell-21-output-2.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<div id="cell-26" class="cell" data-execution_count="21">
<div class="sourceCode cell-code" id="cb35" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb35-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>([val <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> val <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> p_val_list <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> val <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.04</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">and</span> val <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.05</span>]) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(p_val_list), <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>,</span>
<span id="cb35-2">      <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>([val <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> val <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> p_val_list <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> val <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.03</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">and</span> val <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.04</span>]) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(p_val_list), <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>,</span>
<span id="cb35-3">      <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>([val <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> val <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> p_val_list <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> val <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.02</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">and</span> val <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.03</span>]) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(p_val_list), <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>,</span>
<span id="cb35-4">      <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>([val <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> val <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> p_val_list <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> val <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.01</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">and</span> val <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.02</span>]) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(p_val_list), <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>,</span>
<span id="cb35-5">      <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>([val <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> val <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> p_val_list <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> val <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.00</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">and</span> val <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.01</span>]) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(p_val_list))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>0.005389 
 0.008187 
 0.014401 
 0.032377 
 0.91928</code></pre>
</div>
</div>
<div id="cell-27" class="cell" data-execution_count="22">
<div class="sourceCode cell-code" id="cb37" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb37-1">power <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [val <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> val <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> p_val_list <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> val <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.05</span>] <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># .05 is the chosen for alpha</span></span>
<span id="cb37-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Power: '</span>, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">round</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(power) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(p_val_list), <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Power:  0.98</code></pre>
</div>
</div>
<p>As the statistical power increases, distribution of p-values pile up at the very left: Some p-values below 0.05 become more likely (ones more close to 0.00). And when you have very high power, certain p-values below 0.05 (relatively high ones) become more likely under the null:<br>
Hence, wouldn’t be wise to reject the null despite p-value &lt; .05</p>
<div id="cell-29" class="cell" data-execution_count="23">
<div class="sourceCode cell-code" id="cb39" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb39-1">p_val_list <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb39-2"></span>
<span id="cb39-3"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000000</span>):</span>
<span id="cb39-4">    ctrl <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.random.normal(loc<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, scale<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>, size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">65</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># different sample size</span></span>
<span id="cb39-5">    trt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.random.normal(loc<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">107.5</span>, scale<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>, size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">65</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># different sample size</span></span>
<span id="cb39-6">    p_val <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> st.ttest_ind(trt, ctrl)[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span>
<span id="cb39-7"></span>
<span id="cb39-8">    p_val_list.append(p_val)</span></code></pre></div>
</div>
<div id="cell-30" class="cell" data-execution_count="24">
<div class="sourceCode cell-code" id="cb40" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb40-1">power <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [val <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> val <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> p_val_list <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> val <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.05</span>] <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># .05 is the chosen for alpha</span></span>
<span id="cb40-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Power: '</span>, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">round</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(power) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(p_val_list), <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Power:  0.81</code></pre>
</div>
</div>
<div id="cell-31" class="cell" data-execution_count="25">
<div class="sourceCode cell-code" id="cb42" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb42-1">fig <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.figure(figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>))</span>
<span id="cb42-2">ax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> fig.add_subplot(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb42-3"></span>
<span id="cb42-4">plt.ticklabel_format(style<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'plain'</span>, axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'y'</span>)</span>
<span id="cb42-5"></span>
<span id="cb42-6">ax.hist(p_val_list, bins<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, edgecolor<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'black'</span>, linewidth<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.9</span>)</span>
<span id="cb42-7">ax.xaxis.set_minor_locator(AutoMinorLocator(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>))</span>
<span id="cb42-8">ax.yaxis.set_minor_locator(AutoMinorLocator(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>))</span>
<span id="cb42-9">ax.tick_params(which<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'both'</span>, width<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb42-10">ax.tick_params(which<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'major'</span>, length<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>)</span>
<span id="cb42-11">ax.tick_params(which<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'minor'</span>, length<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>)</span>
<span id="cb42-12"></span>
<span id="cb42-13">ax.set_xticks(np.arange(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.05</span>))</span>
<span id="cb42-14">ax.set_ylim(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000000</span>)</span>
<span id="cb42-15">plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'For Cohen</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\'</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">s d of 0.5'</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="25">
<pre><code>Text(0.5, 1.0, "For Cohen's d of 0.5")</code></pre>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://yigitasik.github.io/posts/p-value distribution/index_files/figure-html/cell-26-output-2.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<div id="cell-32" class="cell" data-execution_count="26">
<div class="sourceCode cell-code" id="cb44" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb44-1">p_val_list <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb44-2"></span>
<span id="cb44-3"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000000</span>):</span>
<span id="cb44-4">    ctrl <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.random.normal(loc<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, scale<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>, size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># different sample size</span></span>
<span id="cb44-5">    trt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.random.normal(loc<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">107.5</span>, scale<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>, size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># different sample size</span></span>
<span id="cb44-6">    p_val <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> st.ttest_ind(trt, ctrl)[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span>
<span id="cb44-7"></span>
<span id="cb44-8">    p_val_list.append(p_val)</span></code></pre></div>
</div>
<div id="cell-33" class="cell" data-execution_count="27">
<div class="sourceCode cell-code" id="cb45" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb45-1">power <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [val <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> val <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> p_val_list <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> val <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.05</span>] <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># .05 is the chosen for alpha</span></span>
<span id="cb45-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Power: '</span>, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">round</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(power) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(p_val_list), <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Power:  0.94</code></pre>
</div>
</div>
<div id="cell-34" class="cell" data-execution_count="28">
<div class="sourceCode cell-code" id="cb47" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb47-1">fig <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.figure(figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>))</span>
<span id="cb47-2">ax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> fig.add_subplot(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb47-3"></span>
<span id="cb47-4">plt.ticklabel_format(style<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'plain'</span>, axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'y'</span>)</span>
<span id="cb47-5"></span>
<span id="cb47-6">ax.hist(p_val_list, bins<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, edgecolor<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'black'</span>, linewidth<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.9</span>)</span>
<span id="cb47-7">ax.xaxis.set_minor_locator(AutoMinorLocator(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>))</span>
<span id="cb47-8">ax.yaxis.set_minor_locator(AutoMinorLocator(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>))</span>
<span id="cb47-9">ax.tick_params(which<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'both'</span>, width<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb47-10">ax.tick_params(which<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'major'</span>, length<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>)</span>
<span id="cb47-11">ax.tick_params(which<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'minor'</span>, length<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>)</span>
<span id="cb47-12"></span>
<span id="cb47-13">ax.set_xticks(np.arange(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.05</span>))</span>
<span id="cb47-14">ax.set_ylim(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000000</span>)</span>
<span id="cb47-15">plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'For Cohen</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\'</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">s d of 0.5'</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="28">
<pre><code>Text(0.5, 1.0, "For Cohen's d of 0.5")</code></pre>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://yigitasik.github.io/posts/p-value distribution/index_files/figure-html/cell-29-output-2.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>As one can see, statistical power also depends on the sample size and it should make sense: <em>p</em>-value is a function of test statistic (<em>t</em>, in this case) and following from there, function of sample size. If this doesn’t feel comfortable to you, I suggest you to take a look at <a href="https://yigitasik.github.io/posts/what%20happens%20to%20sample%20statistics/">this post</a>, and check what happens to standard error as the sample size increases.</p>
<p>In the examples below, we always knew the underlying distributions of the populations we sample from. In reality, we usually end up with a result and we wonder the true effect: What is the chance that there is an effect, given that I observed one. This conditional probability is called <em>positive predictive value</em>, something that I heard from a political scientist during pre-COVID days, and if you’re interested in these stuff I suggest you to take a look at it. You can start from Ioannidis’ <a href="https://journals.plos.org/plosmedicine/article?id=10.1371/journal.pmed.0020124">paper</a> or Lakens’ <a href="https://lakens.github.io/statistical_inferences/">book</a> for more structured follow.</p>



 ]]></description>
  <category>Stats</category>
  <category>Inference</category>
  <guid>https://yigitasik.github.io/posts/p-value distribution/</guid>
  <pubDate>Sat, 11 Jan 2025 21:00:00 GMT</pubDate>
</item>
<item>
  <title>Bayesian Updating: Poisson &amp; Gamma</title>
  <dc:creator>Yiğit Aşık</dc:creator>
  <link>https://yigitasik.github.io/posts/Bayesian Updating with Poisson and Gamma/</link>
  <description><![CDATA[ 





<p>The following example is taken from Allen Downey’s <em>Think Bayes</em>. I believe this is a great one to show how to update priors.</p>
<p>Downey takes a match between France and Crotia, played back in 2018 World Cup, that France won 4-2. Then, he aims to answer two questions:</p>
<ul>
<li>How confident we are about France being the better team?</li>
<li>In a rematch, what is the probability that France would win again?</li>
</ul>
<p>I’ll only attempt to answer the first question so that you have a reason to check Downey’s book <a href="https://allendowney.github.io/ThinkBayes2/chap08.html"><em>Think Bayes</em></a>.</p>
<div id="2b765bef-77ed-424a-8c87-5dff1f17fa19" class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb1-3"></span>
<span id="cb1-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> matplotlib <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb1-5"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> seaborn <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> sns</span>
<span id="cb1-6"></span>
<span id="cb1-7"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> empiricaldist <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> emd</span>
<span id="cb1-8"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> scipy.stats <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> st</span>
<span id="cb1-9"></span>
<span id="cb1-10">pd.set_option(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'display.max_columns'</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>)</span>
<span id="cb1-11">pd.set_option(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'display.width'</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">170</span>)</span>
<span id="cb1-12">pd.set_option(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'display.max_rows'</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>)</span>
<span id="cb1-13">pd.set_option(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'display.float_format'</span>, <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span> x: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%.3f</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> x)</span></code></pre></div>
</div>
<p>Starting out with certain assumptions:</p>
<ul>
<li>There is a goal scoring-rate for every team, goals per game (more specifically, per 90), which we will denote as lambda.</li>
<li>A goal is equally likely during any minute of the game, regardless of strategy, tempo etc.<br>
(This is also an assumption under a huge framework in basketball analytics, regularized adjusted plus-minus, wanted to point out just in case you follow my basketball analytics content)</li>
<li>It isn’t possible for a team to score more than once during a single minute.</li>
</ul>
<div id="3ce03495-38c8-43a8-b791-1cf8c2408f35" class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1">lam <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.4</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># lambda, goal scoring rate (i.e. goals per game)</span></span>
<span id="cb2-2">dist <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> st.poisson(lam) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># poisson dist. with lambda = 1.4</span></span></code></pre></div>
</div>
<div id="ecb994db-4cf7-453a-8b91-e6b8489d3566" class="cell" data-execution_count="3">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># probability of scoring "k" goals (4 in this case)</span></span>
<span id="cb3-2">k <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span></span>
<span id="cb3-3">dist.pmf(k).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">round</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># pmf evaluated at 4.</span></span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="3">
<pre><code>0.039</code></pre>
</div>
</div>
<p>So, there’s 3.9% chance to observe 4 goals, under the model above.</p>
<div id="77a06bd9-bf53-4474-81c8-bcc5d13411dd" class="cell" data-execution_count="4">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1">lam <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.4</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># goal scoring rate</span></span>
<span id="cb5-2">goals <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.arange(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># possible values for goals</span></span>
<span id="cb5-3">probas <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> st.poisson(lam).pmf(goals)</span>
<span id="cb5-4"></span>
<span id="cb5-5">probas</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="4">
<pre><code>array([2.46596964e-01, 3.45235750e-01, 2.41665025e-01, 1.12777012e-01,
       3.94719540e-02, 1.10521471e-02, 2.57883433e-03, 5.15766866e-04,
       9.02592015e-05, 1.40403202e-05])</code></pre>
</div>
</div>
<div id="31ed542a-e52e-4ff7-bb86-2b2be18d6284" class="cell" data-execution_count="5">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1">fig <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.figure(figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>))</span>
<span id="cb7-2">g <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> sns.barplot(x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>goals, y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>probas)</span>
<span id="cb7-3"></span>
<span id="cb7-4">g.set_xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Goals'</span>)</span>
<span id="cb7-5">g.set_ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'PMF'</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="5">
<pre><code>Text(0, 0.5, 'PMF')</code></pre>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://yigitasik.github.io/posts/Bayesian Updating with Poisson and Gamma/index_files/figure-html/cell-6-output-2.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>Let’s try to move the other way around: Estimate the goal-scoring rate from given goals.</p>
<p>Downey has used data from previous World Cups to estimate that the each team scores 1.4 goals per game, approximately. Hence, it is reasonable to make mean of lambda 1.4.</p>
<p>The goal scoring rate is continuous and it can’t take values below 0, hence a distribution that reflects this features would be great: Gamma distribution. Additionally, it’s easy to construct one since it only takes one parameter which is the mean which we already have value for.</p>
<div id="3280f8f3-ea3d-424a-8c00-5c2bf56bdafb" class="cell" data-execution_count="6">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1">alpha <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.4</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># mean of the distribution</span></span>
<span id="cb9-2">lams <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.linspace(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">101</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># possible values of lam between 0 and 10</span></span>
<span id="cb9-3">ps <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> st.gamma(alpha).pdf(lams) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># probability densities</span></span></code></pre></div>
</div>
<div id="d196d0a4-1eb6-43fd-9aab-7fa212078370" class="cell" data-execution_count="7">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1">prior <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> emd.Pmf(ps, lams)</span>
<span id="cb10-2">prior.normalize() <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Pmf offers "normalize" method, which divides by the total probability of the data (i.e., probability under any parameter/hypothesis)</span></span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="7">
<pre><code>9.889360237140306</code></pre>
</div>
</div>
<div id="0596370f-0ff6-4964-a0c7-ad2d4e5f3da3" class="cell" data-scrolled="true" data-execution_count="8">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1">df_prior <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.DataFrame(prior.ps, prior.qs).rename(columns<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>{<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>:<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'probas'</span>})</span></code></pre></div>
</div>
<div id="168058b3-5ebb-4cd7-9167-a7ce99914f37" class="cell" data-execution_count="9">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1">fig <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.figure(figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>))</span>
<span id="cb13-2">g <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> sns.lineplot(x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>df_prior.index, y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>df_prior.probas, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'orange'</span>, linestyle<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'--'</span>, linewidth<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb13-3"></span>
<span id="cb13-4">g.set_title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Prior Distribution'</span>)</span>
<span id="cb13-5">g.set_ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'PMF'</span>)</span>
<span id="cb13-6">g.set_xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Goals'</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="9">
<pre><code>Text(0.5, 0, 'Goals')</code></pre>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://yigitasik.github.io/posts/Bayesian Updating with Poisson and Gamma/index_files/figure-html/cell-10-output-2.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<div id="3f82f247-511c-4cad-9008-0ce51970a3ce" class="cell" data-execution_count="10">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1">np.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(df_prior.index <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> df_prior.probas) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># mean of the distribution</span></span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="10">
<pre><code>1.4140818156118378</code></pre>
</div>
</div>
<section id="updating-with-new-data" class="level3">
<h3 class="anchored" data-anchor-id="updating-with-new-data">Updating with new data</h3>
<p>So, our initial belief for France’s goal scoring rate (in this example, for other teams as well), goals per 90 mins, was 1.4. Then we observed 4 goals from France, should we still think that France’s goal scoring rate is 1.4? If not, how much should it change?</p>
<div id="16a37c3c-c82c-4a72-908a-a5c32a3fee2f" class="cell" data-scrolled="true" data-execution_count="11">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb17-1">lambdas <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> lams <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># different lambdas (different goal scoring rates)</span></span>
<span id="cb17-2">k <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># observed data</span></span>
<span id="cb17-3">likelihood <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> st.poisson(lambdas).pmf(k) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># for each lambda (for each parameter), how likely we are to see 4 goals</span></span>
<span id="cb17-4">likelihood[:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>]</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="11">
<pre><code>array([0.00000000e+00, 3.77015591e-06, 5.45820502e-05, 2.50026149e-04])</code></pre>
</div>
</div>
<div id="afa90707-a567-4ac3-8360-3ea0ac0d880a" class="cell" data-execution_count="12">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb19-1">df_prior[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'likelihood'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> likelihood</span>
<span id="cb19-2">df_prior.head(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="12">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">probas</th>
<th data-quarto-table-cell-role="th">likelihood</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">0.000</td>
<td>0.000</td>
<td>0.000</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">0.100</td>
<td>0.041</td>
<td>0.000</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">0.200</td>
<td>0.049</td>
<td>0.000</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">0.300</td>
<td>0.052</td>
<td>0.000</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
<div id="f6e1bdd7-d6ea-4534-87e1-d1f881af1228" class="cell" data-execution_count="13">
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb20-1">p_norm <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> emd.Pmf(df_prior[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'probas'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> df_prior[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'likelihood'</span>], df_prior.index)</span>
<span id="cb20-2">p_norm.normalize()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="13">
<pre><code>0.05015532557804499</code></pre>
</div>
</div>
<div id="ec709091-cde2-42a7-8f4d-645cc73fb116" class="cell" data-execution_count="14">
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb22-1">df_prior[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'posterior'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> p_norm</span></code></pre></div>
</div>
<div id="ea0b4d07-dd92-4c2f-9235-2d903c9b872c" class="cell" data-execution_count="15">
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb23-1">fig <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.figure(figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>))</span>
<span id="cb23-2">g <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> sns.lineplot(x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>df_prior.index, y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>df_prior.posterior, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'blue'</span>, linestyle<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'--'</span>)</span>
<span id="cb23-3"></span>
<span id="cb23-4">g.set_xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Goal scoring rate'</span>)</span>
<span id="cb23-5">g.set_ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'PMF'</span>)</span>
<span id="cb23-6">g.set_title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'France'</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="15">
<pre><code>Text(0.5, 1.0, 'France')</code></pre>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://yigitasik.github.io/posts/Bayesian Updating with Poisson and Gamma/index_files/figure-html/cell-16-output-2.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>Same steps for Crotia:</p>
<div id="fbfb7066-e937-4665-a21b-132c741ecae8" class="cell" data-scrolled="true" data-execution_count="16">
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb25-1">df_crotia <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df_prior[[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'probas'</span>]].copy()</span>
<span id="cb25-2">df_crotia.head(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="16">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">probas</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">0.000</td>
<td>0.000</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">0.100</td>
<td>0.041</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">0.200</td>
<td>0.049</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
<div id="d450c69e-8333-4e71-9ff6-4e40d568a39b" class="cell" data-execution_count="17">
<div class="sourceCode cell-code" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb26-1">k <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Crotia's number of goals in the match</span></span>
<span id="cb26-2">likelihood_cro <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> st.poisson(lams).pmf(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb26-3">likelihood_cro[:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>]</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="17">
<pre><code>array([0.        , 0.00452419, 0.01637462, 0.03333682])</code></pre>
</div>
</div>
<div id="dd30b773-feba-4e71-aea6-c7be522552c6" class="cell" data-execution_count="18">
<div class="sourceCode cell-code" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb28-1">df_crotia[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'likelihood'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> likelihood_cro</span></code></pre></div>
</div>
<div id="075dfbba-7d6c-4472-94dd-fedc08e95398" class="cell" data-execution_count="19">
<div class="sourceCode cell-code" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb29-1">p_norm <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> emd.Pmf(df_crotia[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'probas'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> df_crotia[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'likelihood'</span>], df_crotia.index)</span>
<span id="cb29-2">p_norm.normalize()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="19">
<pre><code>0.1609321178598705</code></pre>
</div>
</div>
<div id="2f2e8fbc-9458-4e28-8fcf-f943869eddaa" class="cell" data-execution_count="20">
<div class="sourceCode cell-code" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb31-1">df_crotia[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'posterior'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> p_norm</span></code></pre></div>
</div>
<div id="90473ed7-46ea-41f2-b9f7-c8deea14e2bc" class="cell" data-execution_count="21">
<div class="sourceCode cell-code" id="cb32" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb32-1">fig <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.figure(figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>))</span>
<span id="cb32-2">g <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> sns.lineplot(x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>df_crotia.index, y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>df_crotia[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'posterior'</span>], color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'red'</span>, linestyle<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'--'</span>)</span>
<span id="cb32-3"></span>
<span id="cb32-4">g.set_xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Goal scoring rate'</span>)</span>
<span id="cb32-5">g.set_ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'PMF'</span>)</span>
<span id="cb32-6">g.set_title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Crotia'</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="21">
<pre><code>Text(0.5, 1.0, 'Crotia')</code></pre>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://yigitasik.github.io/posts/Bayesian Updating with Poisson and Gamma/index_files/figure-html/cell-22-output-2.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>How confident we are that France is the better team?</p>
<div id="78210691" class="cell" data-execution_count="22">
<div class="sourceCode cell-code" id="cb34" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb34-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(</span>
<span id="cb34-2">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Mean of France: '</span>, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>(np.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(df_prior.index <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> df_prior.posterior).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">round</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)), <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span></span>
<span id="cb34-3">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Mean of Crotia: '</span>, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>(np.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>(df_crotia.index <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> df_crotia.posterior).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">round</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))</span>
<span id="cb34-4">)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Mean of France:  2.7 
Mean of Crotia:  1.7</code></pre>
</div>
</div>
<div id="b3f10805-123e-4c3d-9aab-50ce33beaa39" class="cell" data-execution_count="23">
<div class="sourceCode cell-code" id="cb36" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb36-1">fig <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.figure(figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>))</span>
<span id="cb36-2">g <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> sns.lineplot(x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>df_crotia.index, y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>df_crotia[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'posterior'</span>], color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'red'</span>, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Crotia'</span>)</span>
<span id="cb36-3">g <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> sns.lineplot(x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>df_prior.index, y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>df_prior[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'posterior'</span>], color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'blue'</span>, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'France'</span>)</span>
<span id="cb36-4"></span>
<span id="cb36-5">g.set_xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Goals'</span>)</span>
<span id="cb36-6">g.set_ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'PMF'</span>)</span>
<span id="cb36-7">g.set_title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'France vs Crotia'</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="23">
<pre><code>Text(0.5, 1.0, 'France vs Crotia')</code></pre>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://yigitasik.github.io/posts/Bayesian Updating with Poisson and Gamma/index_files/figure-html/cell-24-output-2.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>Probability of superiority is a way to express an <em>effect size</em>. Here’s a great visualization tool that you can play with to make expression of effect sizes more intuitive: <a href="https://rpsychologist.com/cohend/">Interpreting Effect Sizes: An Interactive Visualization</a></p>
<div id="7b91b63c-17cc-4767-8525-2e4fae7291bb" class="cell" data-execution_count="25">
<div class="sourceCode cell-code" id="cb38" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb38-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Probability of superiority.</span></span>
<span id="cb38-2"></span>
<span id="cb38-3">france_proba <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb38-4"></span>
<span id="cb38-5"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> df_prior.index.tolist():</span>
<span id="cb38-6">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> j <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> df_crotia.index.tolist():</span>
<span id="cb38-7">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> j:</span>
<span id="cb38-8">            france_proba <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> df_prior.loc[i, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'posterior'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> df_crotia.loc[j, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'posterior'</span>]</span>
<span id="cb38-9">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span>:</span>
<span id="cb38-10">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">continue</span></span>
<span id="cb38-11"></span>
<span id="cb38-12">france_proba.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">round</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="25">
<pre><code>0.75</code></pre>
</div>
</div>
<p>Probability of superiority feels very intuitive: It is the probability of randomly sampled lambda for France being higher than randomly sampled lambda for Crotia. If there isn’t much overlap between two distributions, we are more confident that the one group (in this example, a team) is higher/lower than the other: Probability of superiority reflects that. You can use any tool (Python, R etc.) to simulate this, and I highly suggest it if you are not currently able to wrap your head around. Just generate different distributions and play with the idea.</p>
<p>I didn’t include but there is one more reason why we used poisson and gamma distributions, it is related to something called <a href="https://www.sciencedirect.com/topics/computer-science/conjugate-prior"><em>conjugates</em></a> that I first came across while I was going through Daniel Lakens’ <a href="https://lakens.github.io/statistical_inferences/04-bayes.html">Improving Your Statistical Inferences: Bayesian statistics</a>. They make things computationally more feasible compared to the <em>grid</em> approach here.</p>
<p>Examples (like this one) from many books can be found on my <a href="https://github.com/YigitAsik/learn-stats-with-sims">GitHub repo</a>, and I highly suggest you to go through Allen Downey’s books. Have a nice weekend.</p>


</section>

 ]]></description>
  <category>Stats</category>
  <category>Bayesian</category>
  <category>Sports Analytics</category>
  <guid>https://yigitasik.github.io/posts/Bayesian Updating with Poisson and Gamma/</guid>
  <pubDate>Thu, 09 Jan 2025 21:00:00 GMT</pubDate>
</item>
<item>
  <title>An Intro Example to Bayes’ Theorem</title>
  <dc:creator>Yiğit Aşık</dc:creator>
  <link>https://yigitasik.github.io/posts/Bayes Theorem/</link>
  <description><![CDATA[ 





<section id="usual-dice-example" class="level2">
<h2 class="anchored" data-anchor-id="usual-dice-example">USUAL DICE EXAMPLE</h2>
<p>Imagine that you and I are playing a guessing game. I have two dice, 12-sided and 6-sided, and I am holding them in both of my hands. You are trying to guess which hand has the 12-sided die. At this very moment, there is no information for you. So, it’s not uncommon for a rational agent to think 50-50.</p>
<p>However, you tell me to roll the die I hold on my left hand, and close your eyes. I inform you that I rolled above 3 (i.e., &gt;= 4). Is it still 50-50? It feels like it’s not, since rolling above 3 is more likely with the 12-sided die, right? So, how should you <em>update</em> your initial belief?</p>
<p>I emphasized the “update” above, this is what one should think of when one encounters the word <em>Bayesian</em>: Updating the prior beliefs in the light of new data. Let’s go through the example.</p>
<section id="calculations" class="level3">
<h3 class="anchored" data-anchor-id="calculations">CALCULATIONS</h3>
<p>At the beginning, before any information, it’s 50-50: <img src="https://latex.codecogs.com/png.latex?P(12%5C:%20sided%20%5C%20LH)%20=%200.5"> and <img src="https://latex.codecogs.com/png.latex?P(12%5C:%20sided%20%5C%20RH)%20=%200.5"> where LH and RH stands for left-hand and right-hand, respectively. Once you have the information that I rolled bigger than 3, there are two possible scenarios: Either I rolled bigger than 3 with 12-sided or with 6-sided.</p>
<ul>
<li><img src="https://latex.codecogs.com/png.latex?P(%3E3%5C:%20%7C%5C%2012%5C%20sided)%20=%200.75"></li>
<li><img src="https://latex.codecogs.com/png.latex?P(%3E3%5C:%20%7C%5C%206%5C%20sided)%20=%200.5"></li>
</ul>
<p>Let’s put those in a tree diagram.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://yigitasik.github.io/posts/Bayes Theorem/tree_diagram.png" class="img-fluid figure-img"></p>
<figcaption>Tree Diagram</figcaption>
</figure>
</div>
<ul>
<li>The first column (left to the first vertical white bar) represents initial beliefs.</li>
<li>The second column represents the probabilities given the first column.</li>
<li>Third column is the multiplication of the three, and represents P(A and B).</li>
</ul>
<p>Well, you are not interested in the whole diagram since you have observed some data: I rolled a number bigger than 3. You wonder:</p>
<p><img src="https://latex.codecogs.com/png.latex?P(12%5C%20sided%5C%20LH%5C:%20%7C%20%3E3)">, which is <img src="https://latex.codecogs.com/png.latex?%5Cdfrac%7BP(12%5C%20sided%5C%20LH%5C:%20,%5C%20%3E3)%7D%7BP(%3E3)%7D">.</p>
<p>For the numerator, you can track the first row of the tree diagram which leads to 0.375. The denominator consists of two parts, rolling above 3 under two different hypotheses: Following the path of rolling above 3 with 12-sided on the left leads to 0.375, which is the first part. In addition, tracking the other scenario of rolling above 3 with 6-sided on hand leads to 0.25. Hence: <img src="https://latex.codecogs.com/png.latex?%5Cdfrac%7B0.375%7D%7B0.375+0.25%7D%20=%200.6"></p>
<p>This represents your new belief of having the 12-sided die on my left hand. If you tell me to roll the die again and construct a new tree diagram, the first column will consist of 0.6 and 0.4 and the following columns would be adjusted accordingly.</p>
</section>
<section id="derivation" class="level3">
<h3 class="anchored" data-anchor-id="derivation">DERIVATION</h3>
<p>Do you have to construct tree diagram each time? After all, even for this simple question the whole process takes a bit of time. With a little bit of algebra, you don’t have to: <img src="https://latex.codecogs.com/png.latex?P(A%5C:%20%7C%5C%20B)%20=%20%5Cdfrac%7BP(A,B)%7D%7BP(B)%7D">. Multiplying both sides by the P(B): <img src="https://latex.codecogs.com/png.latex?P(A%5C:%20%7C%5C%20B)%20P(B)%20=%20P(A,B)"> and since P(A,B) = P(B,A)<br>
<img src="https://latex.codecogs.com/png.latex?P(A%5C:%20%7C%5C%20B)%20P(B)%20=%20P(B,A)"> which leads to <img src="https://latex.codecogs.com/png.latex?P(A%5C:%20%7C%5C%20B)%20P(B)%20=%20P(B%5C:%20%7C%5C%20A)%20P%20(A)"></p>
<p>and voila: <img src="https://latex.codecogs.com/png.latex?P(A%5C:%20%7C%5C%20B)%20=%20%5Cdfrac%7BP(B%5C:%20%7C%5C%20A)%20P(A)%7D%7BP(B)%7D"></p>
<ul>
<li>The left hand side is called <em>posterior probability</em>, and you may come across it in the form of P(hypothesis | data).</li>
<li>The denominator on the right is total probability of the data, sometimes referred to as <em>marginal probability</em>.</li>
<li>P(A) is your initial belief here, the <em>prior</em>.</li>
<li>While P(B | A) is called <em>likelihood</em> which is the probability of the data under given the hypothesis.</li>
</ul>
<p>For our example: <img src="https://latex.codecogs.com/png.latex?P(12%5C%20sided%5C:%20%7C%5C%20%3E%203)%20=%20%5Cdfrac%7BP(%3E3%5C:%20%7C%5C%2012%5C%20sided)%20P(12%5C%20sided)%7D%7BP(%3E3)%7D"></p>
</section>
<section id="about-the-framework" class="level3">
<h3 class="anchored" data-anchor-id="about-the-framework">ABOUT THE FRAMEWORK</h3>
<p>You may see versions of this where instead of hypothesis there can be theory or parameters (and instead of data, evidence) but they all are the same initially. This type of approach has its advantages such as incorporating the prior knowledge: If I would roll the die again, you would make those calculations with new priors (learned from the first roll), making use of what you already know. It allows for priors that are subjective: Maybe I am known to favor my left hand so it is possible for you to have an initial belief that is not reflected as 50-50.</p>
<p>I will talk more about this view in the future posts but if you’re interested, you can check probability and Bayesian chapter in each of the books below:</p>
<ul>
<li><em>Learning Statistics with R</em> by Daniel Navarro</li>
<li><em>Philosophy of Quantitative Methods</em> by Brian D. Haig</li>
<li><em>Doing Bayesian Data Analysis</em> by John K. Kruschke</li>
<li><em>Improving Your Statistical Inferences</em> by Daniel Lakens</li>
<li><em>Think Bayes</em> by Allen B. Downey</li>
</ul>
<p>and I believe I remember the example above from Mine Çetinkaya-Rundel.</p>


</section>
</section>

 ]]></description>
  <category>Stats</category>
  <category>probability</category>
  <category>Bayesian</category>
  <guid>https://yigitasik.github.io/posts/Bayes Theorem/</guid>
  <pubDate>Sat, 04 Jan 2025 21:00:00 GMT</pubDate>
</item>
<item>
  <title>What Happens to Sample Statistics?</title>
  <dc:creator>Yiğit Aşık</dc:creator>
  <link>https://yigitasik.github.io/posts/what happens to sample statistics/</link>
  <description><![CDATA[ 





<p>Let’s start from the basics: The idea is to gather data to make an inference about the population. We use what we know (sample data) to estimate what we don’t (population).</p>
<p>So, let’s see what happens as one collects more data.</p>
<div id="cell-2" class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb1-2"></span>
<span id="cb1-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> matplotlib <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb1-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> seaborn <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> sns</span></code></pre></div>
</div>
<div id="cell-3" class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> n <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">101</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>):</span>
<span id="cb2-2">    sampled <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.random.normal(loc<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, scale<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>, size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>n)</span>
<span id="cb2-3">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Sampling '</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>(n) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">' observations'</span>)</span>
<span id="cb2-4">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Mean: '</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>(np.mean(sampled)))</span>
<span id="cb2-5">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Standard Deviation '</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>(np.std(sampled)))</span>
<span id="cb2-6">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Sampling 10 observations
Mean: 96.54930308046485
Standard Deviation 17.69744525686926


Sampling 20 observations
Mean: 95.26529645787349
Standard Deviation 13.557714188035797


Sampling 30 observations
Mean: 99.59631039122944
Standard Deviation 16.67387851610786


Sampling 40 observations
Mean: 94.76579341950723
Standard Deviation 18.06257861698366


Sampling 50 observations
Mean: 99.61537083458882
Standard Deviation 14.897878602988285


Sampling 60 observations
Mean: 98.68203398707892
Standard Deviation 14.644083079076118


Sampling 70 observations
Mean: 100.36682454658889
Standard Deviation 15.427573719883997


Sampling 80 observations
Mean: 101.00471630426532
Standard Deviation 12.678064261146886


Sampling 90 observations
Mean: 102.7631649616841
Standard Deviation 13.03915710302493


Sampling 100 observations
Mean: 99.17823535292733
Standard Deviation 14.951583438089918

</code></pre>
</div>
</div>
<p>As one increases the sample size taken from the population, sample statistics will <em>approach</em> towards the <strong>population parameter</strong>.<br>
<strong>DOES NOT NECESSARILY DECREASE!</strong> (do not confuse std_dev and std_err) As one can see from the example above!</p>
<p>But <em>standard error</em> <strong>WILL</strong> decrease as the sample size increases. It should make sense intuitively: I have more confidence in my estimates if I know more.</p>
<div id="cell-6" class="cell" data-execution_count="3">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> n <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">101</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>):</span>
<span id="cb4-2">    sampled <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.random.normal(loc<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, scale<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>, size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>n)</span>
<span id="cb4-3">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Sampling '</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>(n) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">' observations'</span>)</span>
<span id="cb4-4">    std_err <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.std(sampled) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> np.sqrt(n)</span>
<span id="cb4-5">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Standard error approximation: '</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>(std_err))</span>
<span id="cb4-6">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Sampling 10 observations
Standard error approximation: 4.452823707231046


Sampling 20 observations
Standard error approximation: 3.798915557039333


Sampling 30 observations
Standard error approximation: 2.3932757697459746


Sampling 40 observations
Standard error approximation: 2.624220779126406


Sampling 50 observations
Standard error approximation: 2.2840746792281217


Sampling 60 observations
Standard error approximation: 2.015124706208566


Sampling 70 observations
Standard error approximation: 1.7230901229016737


Sampling 80 observations
Standard error approximation: 1.5993946754011168


Sampling 90 observations
Standard error approximation: 1.66349862578967


Sampling 100 observations
Standard error approximation: 1.577820207327762

</code></pre>
</div>
</div>
<p>How close is the approximation? Let’s try it for one sample</p>
<div id="cell-8" class="cell" data-execution_count="4">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1">n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">51</span></span>
<span id="cb6-2"></span>
<span id="cb6-3">pop <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.random.normal(loc<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, scale<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>, size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">300000</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Population with normal distribution(mean=100, sd=15)</span></span>
<span id="cb6-4"></span>
<span id="cb6-5">sampled <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.random.choice(pop, size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>n) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># randomly sampling</span></span>
<span id="cb6-6">estimated_mean <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.mean(sampled) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># sample mean</span></span>
<span id="cb6-7">estimated_sd <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.std(sampled) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># sample standard deviation</span></span>
<span id="cb6-8"></span>
<span id="cb6-9">estimated_std_err <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.std(sampled) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> n<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.5</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># estimated standard error, expected variation for my sample statistic.</span></span>
<span id="cb6-10"></span>
<span id="cb6-11"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(estimated_mean, estimated_sd, estimated_std_err)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>95.27311481976386 15.960503088053418 2.2349174605268747</code></pre>
</div>
</div>
<div id="cell-9" class="cell" data-execution_count="5">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Let's take many samples and estimate the mean</span></span>
<span id="cb8-2"></span>
<span id="cb8-3">mean_estimates <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb8-4"></span>
<span id="cb8-5"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>): <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Let's do it 1000 times, sampling 51 in each iteration.</span></span>
<span id="cb8-6">    sampled <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.random.choice(pop, size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>n)</span>
<span id="cb8-7">    mean_estimates.append(np.mean(sampled))</span>
<span id="cb8-8"></span>
<span id="cb8-9">np.std(mean_estimates)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="5">
<pre><code>2.1480690130242537</code></pre>
</div>
</div>
<p>As one can see, it’s not that far away.</p>
<div id="cell-11" class="cell" data-execution_count="6">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1">plt.figure(figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>))</span>
<span id="cb10-2"></span>
<span id="cb10-3">g <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> sns.swarmplot(data<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>mean_estimates, orient<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"h"</span>, size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>, alpha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.8</span>, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"purple"</span>, linewidth<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>,</span>
<span id="cb10-4">                 edgecolor<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"black"</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://yigitasik.github.io/posts/what happens to sample statistics/index_files/figure-html/cell-7-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>What happens when one lowers the sample size? More variation, less confidence. As the sample size increases the estimates approach towards the parameter, so with large sample size each sample ends up having similar estimates. However, that’s not the case with low sample size.</p>
<div id="cell-13" class="cell" data-execution_count="7">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1">n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">16</span></span>
<span id="cb11-2">mean_estimates <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb11-3"></span>
<span id="cb11-4"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>): <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Let's do it 1000 times</span></span>
<span id="cb11-5">    sampled <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.random.choice(pop, size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>n)</span>
<span id="cb11-6">    mean_estimates.append(np.mean(sampled))</span>
<span id="cb11-7"></span>
<span id="cb11-8">np.std(mean_estimates)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="7">
<pre><code>3.713500386895356</code></pre>
</div>
</div>
<div id="cell-14" class="cell" data-execution_count="8">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1">plt.figure(figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>))</span>
<span id="cb13-2"></span>
<span id="cb13-3">g <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> sns.swarmplot(data<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>mean_estimates, orient<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"h"</span>, size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>, alpha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.8</span>, color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"purple"</span>, linewidth<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>,</span>
<span id="cb13-4">                 edgecolor<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"black"</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://yigitasik.github.io/posts/what happens to sample statistics/index_files/figure-html/cell-9-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>Watch out the x-axis, it’s much wider now.</p>
<div id="cell-16" class="cell" data-execution_count="9">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1">mean_estimates <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {</span>
<span id="cb14-2">        <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">16</span>:[],</span>
<span id="cb14-3">        <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">23</span>:[],</span>
<span id="cb14-4">        <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>:[],</span>
<span id="cb14-5">        <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">51</span>:[],</span>
<span id="cb14-6">        <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">84</span>:[],</span>
<span id="cb14-7">        <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">101</span>:[]</span>
<span id="cb14-8">    }</span>
<span id="cb14-9"></span>
<span id="cb14-10"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> n <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">16</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">23</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">51</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">84</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">101</span>]:</span>
<span id="cb14-11">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">500</span>):</span>
<span id="cb14-12">        sampled <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.random.choice(pop, size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>n)</span>
<span id="cb14-13">        mean_estimates[n].append(np.mean(sampled))</span></code></pre></div>
</div>
<div id="cell-17" class="cell" data-execution_count="10">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> key <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> mean_estimates.keys():</span>
<span id="cb15-2">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Sample size: '</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>(key))</span>
<span id="cb15-3">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Standard deviation (std_err) around the estimates: '</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>(np.std(mean_estimates[key])))</span>
<span id="cb15-4">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Sample size: 16
Standard deviation (std_err) around the estimates: 3.855337925425897


Sample size: 23
Standard deviation (std_err) around the estimates: 3.1917223557725363


Sample size: 30
Standard deviation (std_err) around the estimates: 2.7639204989190023


Sample size: 51
Standard deviation (std_err) around the estimates: 2.0366022769176806


Sample size: 84
Standard deviation (std_err) around the estimates: 1.736807903528174


Sample size: 101
Standard deviation (std_err) around the estimates: 1.504399688755003

</code></pre>
</div>
</div>



 ]]></description>
  <category>Stats</category>
  <guid>https://yigitasik.github.io/posts/what happens to sample statistics/</guid>
  <pubDate>Sun, 29 Dec 2024 21:00:00 GMT</pubDate>
</item>
</channel>
</rss>
